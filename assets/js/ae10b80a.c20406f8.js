"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[121],{25504:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/containerization.drawio-37b8d70fca7ecb3ca55029272bda1bb9.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}},43620:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"cloud_operations/overview/container-basics","title":"Container Basics","description":"General Overview of the Course","source":"@site/docs/cloud_operations/overview/container-basics.md","sourceDirName":"cloud_operations/overview","slug":"/overview/container-basics","permalink":"/docs/overview/container-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/cloud_operations/overview/container-basics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"container-basics","title":"Container Basics","description":"General Overview of the Course","slug":"/overview/container-basics","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/overview/introduction"},"next":{"title":"Docker","permalink":"/docs/category/docker"}}');var i=t(74848),a=t(28453);const r={id:"container-basics",title:"Container Basics",description:"General Overview of the Course",slug:"/overview/container-basics",sidebar_position:2},s="Container Basics",c={},l=[{value:"Containerization in a nutshell",id:"containerization-in-a-nutshell",level:2},{value:"Why would someone care about containerization?",id:"why-would-someone-care-about-containerization",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"container-basics",children:"Container Basics"})}),"\n",(0,i.jsx)(n.h2,{id:"containerization-in-a-nutshell",children:"Containerization in a nutshell"}),"\n",(0,i.jsxs)(n.p,{children:["To understand containerization let's first take a look at what ",(0,i.jsx)(n.em,{children:"virtualization"})," is. In short, if you\never wanted to run Linux inside your Windows computer, or Mac OS inside Linux, or any other\ncombination - you can through the use of ",(0,i.jsx)(n.strong,{children:"Virtual Machines"}),"! As their name implies, you can fully\nsimulate any operating system that is isolated from your own PC's OS. Usually, a tool like\n",(0,i.jsx)(n.a,{href:"https://www.virtualbox.org/",children:"VirtualBox"}),", or\n",(0,i.jsx)(n.a,{href:"https://www.redhat.com/en/topics/virtualization/what-is-KVM",children:"KVM"})," can run multiple virtual machines\nat once, being limited only by how powerful your hardware is."]}),"\n",(0,i.jsxs)("center",{children:[" ",(0,i.jsx)(n.img,{alt:"img",src:t(52296).A+"",width:"351",height:"391"})," "]}),"\n",(0,i.jsxs)(n.p,{children:["Virtual machines are very useful if you want to accurately simulate an entire machine. This is often\nuseful in cybersecurity where you want to analyze some malware to see its behaviour, or in education\nwhere you want all students to have the same setup. However, if all you want is to have a\n",(0,i.jsx)(n.strong,{children:"consistent"})," environment in which you can run your application, simulating an entire operating\nsystem could be a bit overkill. This is where ",(0,i.jsx)(n.strong,{children:"containers"})," come in."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Containers"}),", compared to VMs, are friendlier with the host operating system, sharing resources in\na more streamlined manner. They don't require you to run an entire operating system, just the\nunderlying libraries necessary for your application to run, and your application code. The\nindustry-standard application to manage containers is ",(0,i.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"}),"."]}),"\n",(0,i.jsxs)("center",{children:[" ",(0,i.jsx)(n.img,{alt:"img",src:t(25504).A+"",width:"351",height:"311"})," "]}),"\n",(0,i.jsx)(n.p,{children:"Another neat advantage of containers, due to their lightweight nature they start extremely fast.\nThis is extremely helpful when managing widely popular applications due to their ability to create\nmore containers to respond to a sudden surge in new users."}),"\n",(0,i.jsx)(n.h2,{id:"why-would-someone-care-about-containerization",children:"Why would someone care about containerization?"}),"\n",(0,i.jsxs)(n.p,{children:["Imagine that you have built your billion-dollar application - the software which will revolutionize\nthe world as we know it \ud83d\udcb0! Now, all you need to do is to put it on a server so it can be accessed\nby everybody. You install all of your dependencies, ",(0,i.jsx)(n.code,{children:"node"}),", ",(0,i.jsx)(n.code,{children:"python"}),", etc., and your program\ncrashes. You tracked down the culprit and there was a slight change in ",(0,i.jsx)(n.code,{children:"node"})," that introduced a\nsmall bug. No worries, you change the version to one that works before."]}),"\n",(0,i.jsx)(n.p,{children:"Then, after some weeks, you notice that your website keeps going down. After some investigation, you\nnotice that there is a small bug in a mini-game you introduced as an easter egg. That small bug\ncrashes the mini-game, but more importantly, it takes down the whole application with it. You fix it\nand move on."}),"\n",(0,i.jsxs)(n.p,{children:["Your website is now getting thousands of users, and your database cannot handle that many users at\nonce. Not to worry, you just rent out a bigger computer. Then, your app goes popular in America, and\nAustralia and now you are getting complaints that your app is slow due to the massive delay between\nyour server in Europe and their location. Now you have to rent out multiple servers, in multiple\nlocations, but then you forgot that you had to specify a ",(0,i.jsx)(n.code,{children:"node"})," version, and you have to shut down\nyour service to re-engineer everything."]}),"\n",(0,i.jsxs)(n.p,{children:["All of these headaches could have been avoided by using containers. They offer an ",(0,i.jsx)(n.strong,{children:"isolated and\nreproducible environment"}),". This means that you have to specify your dependencies once, and each\ntime a new container for your application is created it is guaranteed to work. More so, you can\nsplit up your application into multiple containers - for example, a container handles the database,\none handles the user interface, and another handles that buggy mini-game. If one fails, the others\nwill continue running. And, after you learn about ",(0,i.jsx)(n.strong,{children:"Kubernetes"}),", you will also understand how to\nstart multiple instances of the same application to better handle bigger workloads."]}),"\n",(0,i.jsxs)(n.p,{children:["However, as a word of caution, don't start creating your application with the idea that it will have\nmillions of users on the first day. Even some popular applications with millions of users ",(0,i.jsx)(n.a,{href:"https://youtu.be/zcu9EaLP-aM?si=Ach8bAEg3xnR3Zsa&t=41",children:"used\nGoogle Sheets as a placeholder for their\ndatabase"})," and got away with it. It's best to\nuse a few containers at the start and design your software in such a way that if it does go popular\nyou don't have to work too hard."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},52296:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/virtualization.drawio-efd32e3f7c0f7941baea30e0bc94ffa1.png"}}]);