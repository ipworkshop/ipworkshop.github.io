"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[3234],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},83845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"desktop_applications/Rust/Project-structure","title":"Project Structure","description":"What is Cargo?","source":"@site/docs/desktop_applications/02_Rust/02_Project-structure.md","sourceDirName":"desktop_applications/02_Rust","slug":"/desktop_applications/Rust/Project-structure","permalink":"/docs/desktop_applications/Rust/Project-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/02_Rust/02_Project-structure.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Project Structure"},"sidebar":"tutorialSidebar","previous":{"title":"Installing and configuring","permalink":"/docs/desktop_applications/Rust/Installing-and-configuring"},"next":{"title":"Variables and data types","permalink":"/docs/desktop_applications/Rust/Variables-and-data-types"}}');var t=s(74848),i=s(28453);const o={title:"Project Structure"},c=void 0,l={},d=[];function a(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What is Cargo?"})}),"\n",(0,t.jsxs)(n.p,{children:["Cargo is Rust's ",(0,t.jsx)(n.strong,{children:"build system and package manager"})," which streamlines almost every aspect of your Rust workflow:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Project Creation:"})," ",(0,t.jsx)(n.code,{children:"cargo new"})," quickly sets up a new Rust project with the correct structure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Building:"})," ",(0,t.jsx)(n.code,{children:"cargo build"})," compiles your code into an executable program."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Running:"})," ",(0,t.jsx)(n.code,{children:"cargo run"})," builds and then executes your program."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing:"})," ",(0,t.jsx)(n.code,{children:"cargo test"})," runs your project's tests."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Let\'s create our classic "Hello, world!" program using Cargo.'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create a New Project:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In your terminal, navigate to a directory where you want to create your project (e.g., your Desktop or a ",(0,t.jsx)(n.code,{children:"dev"})," folder)."]}),"\n",(0,t.jsxs)(n.li,{children:["Run this command:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo new hello_rust_app\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Cargo will create a new folder named ",(0,t.jsx)(n.code,{children:"hello_rust_app"})," with a basic project structure inside."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Explore the Project Structure:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Navigate into the new folder: ",(0,t.jsx)(n.code,{children:"cd hello_rust_app"})]}),"\n",(0,t.jsxs)(n.li,{children:["Look at the contents:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Cargo.toml"}),": This is the manifest file for your project. It contains metadata about your project (name, version) and lists its dependencies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/main.rs"}),": This is where your main Rust code lives."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target/"}),": (Created after you build) This is where compiled executable files go."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Examine ",(0,t.jsx)(n.code,{children:"src/main.rs"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Open ",(0,t.jsx)(n.code,{children:"src/main.rs"})," in your VS Code. You'll see:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello, world!");\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn main()"}),": This is the main function, the entry point of every Rust executable program."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"println!"}),": This is a ",(0,t.jsx)(n.strong,{children:"macro"})," (indicated by the ",(0,t.jsx)(n.code,{children:"!"}),"). It prints text to the console."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run Your Application:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In your terminal (make sure you're inside the ",(0,t.jsx)(n.code,{children:"hello_rust_app"})," folder), run:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"What happens?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Cargo first ",(0,t.jsx)(n.strong,{children:"compiles"}),' your code (you\'ll see messages like "Compiling hello_rust_app v0.1.0...").']}),"\n",(0,t.jsxs)(n.li,{children:["Then, it ",(0,t.jsx)(n.strong,{children:"executes"})," the compiled program."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["You should see: ",(0,t.jsx)(n.code,{children:"Hello, world!"})," printed in your terminal."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You've just created and run your very first Rust application."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);