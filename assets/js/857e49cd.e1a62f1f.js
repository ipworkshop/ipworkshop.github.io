"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[7714],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},55353:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"desktop_applications/Slint/Structs-and-Enums","title":"Structs and Enums in Slint","description":"Structs","source":"@site/docs/desktop_applications/03_Slint/10_Structs-and-Enums.md","sourceDirName":"desktop_applications/03_Slint","slug":"/desktop_applications/Slint/Structs-and-Enums","permalink":"/docs/desktop_applications/Slint/Structs-and-Enums","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/03_Slint/10_Structs-and-Enums.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Functions and Callbacks in Slint","permalink":"/docs/desktop_applications/Slint/Callbacks"},"next":{"title":"File I/O in Rust","permalink":"/docs/desktop_applications/Data/File-io"}}');var i=s(74848),r=s(28453);const l={},a="Structs and Enums in Slint",c={},o=[{value:"Structs",id:"structs",level:2},{value:"Anonymous Structures",id:"anonymous-structures",level:2},{value:"Enums",id:"enums",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"structs-and-enums-in-slint",children:"Structs and Enums in Slint"})}),"\n",(0,i.jsx)(n.h2,{id:"structs",children:"Structs"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"struct"})," keyword to define named data structures."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-slint",children:'export struct Player {\n    name: string,\n    score: int,\n}\n\nexport component Example {\n    in-out property<Player> player: { name: "Foo", score: 100 };\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Default values: all fields are set to their type\u2019s default value."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"anonymous-structures",children:"Anonymous Structures"}),"\n",(0,i.jsx)(n.p,{children:"You can declare anonymous structs inline using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-slint",children:"{ field1: type1, field2: type2 }\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize them with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-slint",children:"{ field1: value1, field2: value2 }\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-slint",children:'export component Example {\n    in-out property<{name: string, score: int}> player: { name: "Foo", score: 100 };\n    in-out property<{a: int, }> foo: { a: 3 };\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Trailing commas are allowed in type declarations and initializers."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"enum"})," keyword to define enumerations."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-slint",children:"export enum CardSuit { clubs, diamonds, hearts, spade }\n\nexport component Example {\n    in-out property<CardSuit> card: spade;\n    out property<bool> is-clubs: card == CardSuit.clubs;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enum values are accessed as ",(0,i.jsx)(n.code,{children:"EnumName.value"})," (e.g., ",(0,i.jsx)(n.code,{children:"CardSuit.spade"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["The enum name can be omitted if:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The property is of that enum type."}),"\n",(0,i.jsx)(n.li,{children:"The return value of a callback is of that enum type."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Default value of an enum type is always its ",(0,i.jsx)(n.strong,{children:"first"})," value."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);