"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[1325],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}},77598:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"cloud_operations/kubernetes/resources/pod/pod-status","title":"PodStatus","description":"","source":"@site/docs/cloud_operations/kubernetes/resources/pod/pod-status.md","sourceDirName":"cloud_operations/kubernetes/resources/pod","slug":"/cloud_operations/kubernetes/resources/pod/pod-status","permalink":"/docs/cloud_operations/kubernetes/resources/pod/pod-status","draft":false,"unlisted":true,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/cloud_operations/kubernetes/resources/pod/pod-status.md","tags":[],"version":"current","frontMatter":{"title":"PodStatus","description":"","unlisted":true},"sidebar":"tutorialSidebar"}');var i=s(74848),r=s(28453);const d={title:"PodStatus",description:"",unlisted:!0},o="PodStatus",c={},l=[];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"podstatus",children:(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus",children:"PodStatus"})})}),"\n",(0,i.jsx)(n.p,{children:"The PodStatus represents the information about the status that a Pod is in. Status may TRAIL the actual state of a system, especially if the node that hosts the pod cannot contact the control plane."}),"\n",(0,i.jsx)(n.p,{children:"Here, we remind the most important:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"phase:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})," - ",(0,i.jsx)(n.code,{children:'"Pending" | "Running" | "Succeeded" | "Failed" | "Unknown"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"description: summary of the pod lifecycle phase:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Pending"}),": pod has been accepted by kubernetes, but one or more containers have not been started"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Running"}),": pod has been placed on a node, all containers have been created and at least one container is running, starting or restarting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Succeeded"}),": all containers in the pod have been terminated successfully and will not be restarted"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"While our main focus is on applications (well, containers and pods) that run indefinitely, there can be pods that run once"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Failed"}),": all containers in a pod have terminated, and at least one container terminated in a failure"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Failed"})," status appears, most of the time, when a pod has been restarted too frequently and has failed too frequently, as well"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Unknown"}),": the state of the pod could not be obtained. This usually happens because there is trouble communicated with the node where the pod should be running"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"conditions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/",children:(0,i.jsx)(n.code,{children:"Array<PodCondition>"})})]}),"\n",(0,i.jsxs)(n.li,{children:["description: list of current observed conditions of the pod:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Initialized"}),": all init containers have started successfully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Ready"}),": the pod is able to serve requests and all containers are ready"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ContainersReady"}),": all containers in the pod are ready"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PodScheduled"}),": the pod has been scheduled to a node"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"hostIP:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsx)(n.li,{children:"description: the IP address of the node where the pod is running"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"podIP:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsx)(n.li,{children:"description: the IP address assigned to the pod"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"startTime:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string (timestamp)"})]}),"\n",(0,i.jsx)(n.li,{children:"description: the time when the pod was acknowledged by the Kubernetes system"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"containerStatuses:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/",children:(0,i.jsx)(n.code,{children:"Array<ContainerStatus>"})})]}),"\n",(0,i.jsxs)(n.li,{children:["description: detailed information about the status of each container in the pod, including:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": the name of the container"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"state"}),": the current state of the container (",(0,i.jsx)(n.code,{children:"waiting"}),", ",(0,i.jsx)(n.code,{children:"running"}),", or ",(0,i.jsx)(n.code,{children:"terminated"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lastState"}),": details about the last terminated state of the container, if applicable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ready"}),": a boolean indicating if the container is ready to serve requests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"restartCount"}),": the number of times the container has been restarted"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"message:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsx)(n.li,{children:"description: a human-readable message indicating details about why the pod is in its current condition"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"reason:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["type: ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsx)(n.li,{children:"description: a brief CamelCase message indicating why the pod is in its current state"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);