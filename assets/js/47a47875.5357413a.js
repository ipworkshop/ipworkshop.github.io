"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[7494],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},56252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"desktop_applications/Networking/Fetching-public-apis","title":"Fetching Public APIs in Rust","description":"This guide shows how to fetch public APIs in Rust using reqwest and tokio.","source":"@site/docs/desktop_applications/05_Networking/03_Fetching-public-apis.md","sourceDirName":"desktop_applications/05_Networking","slug":"/desktop_applications/Networking/Fetching-public-apis","permalink":"/docs/desktop_applications/Networking/Fetching-public-apis","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/05_Networking/03_Fetching-public-apis.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Http Requests with reqwest","permalink":"/docs/desktop_applications/Networking/Http-requests-with-reqwest"},"next":{"title":"Ui-update-with-data","permalink":"/docs/desktop_applications/Networking/Ui-update-with-data"}}');var r=t(74848),i=t(28453);const a={},c="Fetching Public APIs in Rust",l={},o=[{value:"1. Setup",id:"1-setup",level:2},{value:"2. Fetch a Joke",id:"2-fetch-a-joke",level:2},{value:"3. Weather API Example (OpenWeatherMap)",id:"3-weather-api-example-openweathermap",level:2},{value:"4. Fetch a Random Cat Fact",id:"4-fetch-a-random-cat-fact",level:2},{value:"General Notes",id:"general-notes",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fetching-public-apis-in-rust",children:"Fetching Public APIs in Rust"})}),"\n",(0,r.jsxs)(n.p,{children:["This guide shows how to fetch public APIs in Rust using ",(0,r.jsx)(n.code,{children:"reqwest"})," and ",(0,r.jsx)(n.code,{children:"tokio"}),".",(0,r.jsx)(n.br,{}),"\n","We\u2019ll walk through small examples and explain what\u2019s happening."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-setup",children:"1. Setup"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"Cargo.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dependencies]\ntokio   = { version = "1", features = ["full"] }\nreqwest = { version = "0.11", features = ["json"] }\nserde   = { version = "1.0", features = ["derive"] }\nserde_json = "1.0"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tokio"}),": Async runtime that allows us to write asynchronous code (",(0,r.jsx)(n.code,{children:"async"}),"/",(0,r.jsx)(n.code,{children:"await"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"reqwest"}),": HTTP client library for making GET/POST requests."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"serde"})," and ",(0,r.jsx)(n.strong,{children:"serde_json"}),": For converting JSON data into Rust structs automatically."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-fetch-a-joke",children:"2. Fetch a Joke"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct Joke { setup: String, punchline: String }\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = Client::new();\n    let url = "https://official-joke-api.appspot.com/random_joke";\n\n    let joke: Joke = client.get(url).send().await?.json().await?;\n\n    println!("{} \u2014 {}", joke.setup, joke.punchline);\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We create a ",(0,r.jsx)(n.code,{children:"Client"})," to make HTTP requests."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"client.get(url)"})," creates a GET request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".send().await?"})," sends the request and waits for the response."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".json().await?"})," converts the JSON into our ",(0,r.jsx)(n.code,{children:"Joke"})," struct automatically using ",(0,r.jsx)(n.code,{children:"serde"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"We then print the joke\u2019s setup and punchline."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-weather-api-example-openweathermap",children:"3. Weather API Example (OpenWeatherMap)"}),"\n",(0,r.jsxs)(n.p,{children:["You can sign up for a free API key at ",(0,r.jsx)(n.a,{href:"https://openweathermap.org/",children:"https://openweathermap.org/"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct WeatherResponse {\n    name: String,\n    main: Main,\n    weather: Vec<Weather>,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Main { temp: f64 }\n\n#[derive(Debug, Deserialize)]\nstruct Weather { description: String }\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let api_key = "YOUR_API_KEY"; // from OpenWeather\n    let city = "London";\n    let url = format!(\n        "https://api.openweathermap.org/data/2.5/weather?q={}&appid={}&units=metric",\n        city, api_key\n    );\n\n    let client = Client::new();\n    let resp: WeatherResponse = client.get(&url).send().await?.json().await?;\n\n    println!("Weather in {}: {}\xb0C, {}",\n        resp.name,\n        resp.main.temp,\n        resp.weather.first().map(|w| &w.description).unwrap_or(&"No data".to_string())\n    );\n\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"WeatherResponse"})," struct matches the JSON structure returned by OpenWeather."]}),"\n",(0,r.jsxs)(n.li,{children:["We use ",(0,r.jsx)(n.code,{children:"format!"})," to insert the city name and API key into the URL."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"units=metric"})," parameter tells the API to return Celsius temperatures."]}),"\n",(0,r.jsx)(n.li,{children:"After parsing the JSON, we display the city name, temperature, and weather description."}),"\n",(0,r.jsx)(n.li,{children:"Always store your API key in an environment variable in real apps for security."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-fetch-a-random-cat-fact",children:"4. Fetch a Random Cat Fact"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct CatFact { fact: String }\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = Client::new();\n    let url = "https://catfact.ninja/fact";\n\n    let fact: CatFact = client.get(url).send().await?.json().await?;\n    println!("Cat fact: {}", fact.fact);\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This example is almost identical to the joke example but uses another API."}),"\n",(0,r.jsxs)(n.li,{children:["The API returns JSON with a single field, ",(0,r.jsx)(n.code,{children:"fact"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"This is perfect for learning because you can easily change the URL and struct to fetch other simple APIs."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"general-notes",children:"General Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error handling"}),": In production, always check if the request succeeded before parsing. Use ",(0,r.jsx)(n.code,{children:".error_for_status()"})," to catch HTTP errors."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Reuse the same ",(0,r.jsx)(n.code,{children:"Client"})," across requests instead of creating a new one each time."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": Never hardcode API keys in your source code. Use environment variables or secure config files."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data mapping"}),": Struct field names must match the JSON keys or use ",(0,r.jsx)(n.code,{children:'#[serde(rename = "json_key_name")]'}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);