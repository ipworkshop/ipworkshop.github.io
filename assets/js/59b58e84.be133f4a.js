"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[7071],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}},53648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"desktop_applications/Slint/Repetition","title":"Repetition in Slint","description":"Introduction","source":"@site/docs/desktop_applications/03_Slint/08_Repetition.md","sourceDirName":"desktop_applications/03_Slint","slug":"/desktop_applications/Slint/Repetition","permalink":"/docs/desktop_applications/Slint/Repetition","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/03_Slint/08_Repetition.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Globals in Slint","permalink":"/docs/desktop_applications/Slint/Globals"},"next":{"title":"Functions and Callbacks in Slint","permalink":"/docs/desktop_applications/Slint/Callbacks"}}');var r=t(74848),l=t(28453);const s={},o="Repetition in Slint",a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Supported Model Types",id:"supported-model-types",level:2},{value:"Examples",id:"examples",level:2},{value:"Integer/Array Literal Model",id:"integerarray-literal-model",level:3},{value:"Array of Structs as a Model",id:"array-of-structs-as-a-model",level:3},{value:"Arrays and Models in Slint",id:"arrays-and-models-in-slint",level:2},{value:"Array Operations",id:"array-operations",level:2},{value:"Length",id:"length",level:3},{value:"Index Access",id:"index-access",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"repetition-in-slint",children:"Repetition in Slint"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"for-in"})," syntax in Slint is used to create multiple instances of an element dynamically."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:"for name[index] in model : id := Element { ... }\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"})," \u2192 variable holding the model's value in each iteration."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"index"})," ",(0,r.jsx)(n.em,{children:"(optional)"})," \u2192 index of the current element."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"id"})," ",(0,r.jsx)(n.em,{children:"(optional)"})," \u2192 identifier for the element."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model"})," \u2192 integer, array, or natively declared model."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"supported-model-types",children:"Supported Model Types"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integer"})," \u2192 repeats the element that many times."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Array"})," \u2192 repeats the element for each array entry."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Native Model"})," \u2192 repeats for each item in a model declared in Slint or provided from native code."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The loop variable (",(0,r.jsx)(n.code,{children:"name"}),") is available within the repeated element as a pseudo-property."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"integerarray-literal-model",children:"Integer/Array Literal Model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:"export component Example inherits Window {\n    preferred-width: 300px;\n    preferred-height: 100px;\n\n    for my-color[index] in [ #e11, #1a2, #23d ]: Rectangle {\n        height: 100px;\n        width: 60px;\n        x: self.width * index;\n        background: my-color;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"array-of-structs-as-a-model",children:"Array of Structs as a Model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:'export component Example inherits Window {\n    preferred-width: 50px;\n    preferred-height: 50px;\n\n    in property <[{foo: string, col: color}]> model: [\n        {foo: "abc", col: #f00 },\n        {foo: "def", col: #00f },\n    ];\n\n    VerticalLayout {\n        for data in root.model: my-repeated-text := Text {\n            color: data.col;\n            text: data.foo;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"arrays-and-models-in-slint",children:"Arrays and Models in Slint"}),"\n",(0,r.jsx)(n.p,{children:"Arrays are declared by enclosing the element type in square brackets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:'export component Example {\n    in-out property<[int]> list-of-int: [1, 2, 3];\n    in-out property<[{a: int, b: string}]> list-of-structs: [\n        { a: 1, b: "hello" },\n        { a: 2, b: "world" }\n    ];\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Array literals"})," and ",(0,r.jsx)(n.strong,{children:"array properties"})," can both be used as models in ",(0,r.jsx)(n.code,{children:"for"})," expressions."]}),"\n",(0,r.jsx)(n.h2,{id:"array-operations",children:"Array Operations"}),"\n",(0,r.jsx)(n.p,{children:"Arrays and models support:"}),"\n",(0,r.jsx)(n.h3,{id:"length",children:"Length"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:"list-of-int.length\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the number of items."}),"\n",(0,r.jsx)(n.h3,{id:"index-access",children:"Index Access"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:"list-of-int[0] // first element\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the index is out of bounds, Slint returns a default-constructed value."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-slint",children:"export component Example {\n    in-out property<[int]> list-of-int: [1, 2, 3];\n\n    out property<int> list-len: list-of-int.length;\n    out property<int> first-int: list-of-int[0];\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);