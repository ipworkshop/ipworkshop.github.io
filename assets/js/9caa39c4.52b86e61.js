"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[4832],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var r=n(96540);const t={},i=r.createContext(t);function o(e){const s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:s},e.children)}},67673:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"desktop_applications/Rust/Exercises","title":"Exercises","description":"1. Guessing Game","source":"@site/docs/desktop_applications/02_Rust/13_Exercises.md","sourceDirName":"desktop_applications/02_Rust","slug":"/desktop_applications/Rust/Exercises","permalink":"/docs/desktop_applications/Rust/Exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/02_Rust/13_Exercises.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Exercises"},"sidebar":"tutorialSidebar","previous":{"title":"Module Organization","permalink":"/docs/desktop_applications/Rust/Module-organization"},"next":{"title":"File I/O in Rust","permalink":"/docs/desktop_applications/Data/File-io"}}');var t=n(74848),i=n(28453);const o={title:"Exercises"},c=void 0,d={},l=[{value:"1. Guessing Game",id:"1-guessing-game",level:3},{value:"2. Custom Error-Handling System",id:"2-custom-error-handling-system",level:3}];function a(e){const s={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h3,{id:"1-guessing-game",children:"1. Guessing Game"}),"\n",(0,t.jsx)(s.p,{children:"You have to create a simple guessing game which utilizes the knowledge acquired so far."}),"\n",(0,t.jsx)(s.p,{children:"Firstly, create a new project similar to the one in Lesson 1."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Game Logic:"})}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Generate a random secret number."}),"\n",(0,t.jsx)(s.li,{children:"Prompt the user to guess."}),"\n",(0,t.jsx)(s.li,{children:"Read the user's input."}),"\n",(0,t.jsx)(s.li,{children:"Compare the guess to the secret number."}),"\n",(0,t.jsx)(s.li,{children:"Tell the user if they guessed too high, too low, or correctly."}),"\n",(0,t.jsx)(s.li,{children:"Keep looping until the user guesses correctly."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"2-custom-error-handling-system",children:"2. Custom Error-Handling System"}),"\n",(0,t.jsxs)(s.p,{children:["You will design a custom error-handling system to demonstrate your understanding of Rust's ",(0,t.jsx)(s.code,{children:"Result"}),", ",(0,t.jsx)(s.code,{children:"enum"}),", and trait implementation."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Your Task:"})}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["Create a new project with a library module (",(0,t.jsx)(s.code,{children:"src/lib.rs"}),") and a main application file (",(0,t.jsx)(s.code,{children:"src/main.rs"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:["In the library module, define a public ",(0,t.jsx)(s.code,{children:"enum"})," called ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MyErrorType"})})," with variants like ",(0,t.jsx)(s.code,{children:"NotFound"}),", ",(0,t.jsx)(s.code,{children:"UnexpectedError"}),", and ",(0,t.jsx)(s.code,{children:"InvalidInput"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Define a public ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CustomError"})})," ",(0,t.jsx)(s.code,{children:"struct"})," that contains both a ",(0,t.jsx)(s.code,{children:"String"})," message and a ",(0,t.jsx)(s.code,{children:"MyErrorType"})," variant."]}),"\n",(0,t.jsxs)(s.li,{children:["Implement the necessary traits (",(0,t.jsx)(s.code,{children:"std::fmt::Display"})," and ",(0,t.jsx)(s.code,{children:"std::error::Error"}),") for your ",(0,t.jsx)(s.code,{children:"CustomError"})," struct so it works with Rust's standard error handling."]}),"\n",(0,t.jsxs)(s.li,{children:["Create a public function named ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"handle_error"})})," that accepts a message and an ",(0,t.jsx)(s.code,{children:"error_type"})," and returns an ",(0,t.jsx)(s.code,{children:"Err"})," variant of ",(0,t.jsx)(s.code,{children:"Result<(), CustomError>"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["In your ",(0,t.jsx)(s.code,{children:"main.rs"}),", use the ",(0,t.jsx)(s.code,{children:"handle_error"})," function to simulate different errors and demonstrate how to handle them gracefully using ",(0,t.jsx)(s.code,{children:"Result"})," and the ",(0,t.jsx)(s.code,{children:"?"})," operator."]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);