"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[8315],{4832:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"iot/lesson3","title":"WiFi","description":"-----------------","source":"@site/docs/iot/lesson3.md","sourceDirName":"iot","slug":"/iot/lesson3","permalink":"/docs/iot/lesson3","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/iot/lesson3.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"WiFi","slug":"lesson3","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Audio-Video","permalink":"/docs/iot/lesson2"},"next":{"title":"Radar App","permalink":"/docs/iot/lesson4"}}');var t=r(4848),i=r(8453);const o={title:"WiFi",slug:"lesson3",sidebar_position:4},a=void 0,l={},c=[{value:"Part 1 - Connecting to Wi-Fi",id:"part-1---connecting-to-wi-fi",level:2},{value:"Part 2 - Talking to Public APIs",id:"part-2---talking-to-public-apis",level:2},{value:"Public APIs Resource",id:"public-apis-resource",level:3},{value:"Fetching Data (JSON)",id:"fetching-data-json",level:3},{value:"Example: NASA Astronomy Picture of the Day",id:"example-nasa-astronomy-picture-of-the-day",level:3},{value:"Exercises - Public API Practice",id:"exercises---public-api-practice",level:3},{value:"Part 3 - Running a server on the Pico",id:"part-3---running-a-server-on-the-pico",level:2},{value:"Exercises",id:"exercises",level:3},{value:"Part 4 - Creating a Local Flask Server",id:"part-4---creating-a-local-flask-server",level:2},{value:"Install Flask",id:"install-flask",level:3},{value:"Minimal Flask Server (<code>server.py</code>)",id:"minimal-flask-server-serverpy",level:3},{value:"Pico W - Talking to Local Flask Server",id:"pico-w---talking-to-local-flask-server",level:3},{value:"Exercises - Flask Interaction",id:"exercises---flask-interaction",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"part-1---connecting-to-wi-fi",children:"Part 1 - Connecting to Wi-Fi"}),"\n",(0,t.jsxs)(e.p,{children:["The Pico W uses the ",(0,t.jsx)(e.code,{children:"network"})," module for Wi-Fi."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import network\r\nimport time\r\n\r\nSSID = "your_wifi_name"\r\nPASSWORD = "your_wifi_password"\r\n\r\nwlan = network.WLAN(network.STA_IF)\r\nwlan.active(True)\r\nwlan.connect(SSID, PASSWORD)\r\n\r\nprint("Connecting to Wi-Fi", end="")\r\nwhile not wlan.isconnected():\r\n    print(".", end="")\r\n    time.sleep(0.5)\r\nprint("\\nConnected!")\r\nprint("IP address:", wlan.ifconfig()[0])\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"wlan.ifconfig()"})," to get ",(0,t.jsx)(e.code,{children:"(ip, subnet, gateway, dns)"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Connection loops are common; add a timeout in production."}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"part-2---talking-to-public-apis",children:"Part 2 - Talking to Public APIs"}),"\n",(0,t.jsx)(e.h3,{id:"public-apis-resource",children:"Public APIs Resource"}),"\n",(0,t.jsxs)(e.p,{children:["A great resource is the ",(0,t.jsx)(e.strong,{children:"Public APIs"})," ",(0,t.jsx)(e.a,{href:"https://github.com/public-apis/public-apis",children:"repo"}),".\r\nIt lists hundreds of free, open APIs - weather, astronomy, jokes, space, finance, etc."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"fetching-data-json",children:"Fetching Data (JSON)"}),"\n",(0,t.jsxs)(e.p,{children:["MicroPython includes a minimal ",(0,t.jsx)(e.code,{children:"urequests"})," library (install it if your firmware doesn't have it)."]}),"\n",(0,t.jsxs)(e.p,{children:["Example: ",(0,t.jsx)(e.strong,{children:"Fetching a random joke"})," from ",(0,t.jsx)(e.code,{children:"https://official-joke-api.appspot.com/random_joke"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import network\r\nimport urequests\r\nimport time\r\n\r\n# --- connect to wifi ---\r\nSSID = "your_wifi_name"\r\nPASSWORD = "your_wifi_password"\r\n\r\nwlan = network.WLAN(network.STA_IF)\r\nwlan.active(True)\r\nwlan.connect(SSID, PASSWORD)\r\nwhile not wlan.isconnected():\r\n    time.sleep(0.5)\r\n\r\n# --- API request ---\r\nurl = "https://official-joke-api.appspot.com/random_joke"\r\nresponse = urequests.get(url)\r\ndata = response.json()\r\nresponse.close()\r\n\r\nprint("Joke:", data["setup"])\r\nprint("Punchline:", data["punchline"])\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"example-nasa-astronomy-picture-of-the-day",children:"Example: NASA Astronomy Picture of the Day"}),"\n",(0,t.jsxs)(e.p,{children:["This requires a free API key (sign up at ",(0,t.jsx)(e.a,{href:"https://api.nasa.gov",children:"https://api.nasa.gov"}),")."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import urequests\r\n\r\nAPI_KEY = "DEMO_KEY"  # replace with your key\r\nurl = f"https://api.nasa.gov/planetary/apod?api_key={API_KEY}"\r\n\r\nresp = urequests.get(url)\r\ninfo = resp.json()\r\nresp.close()\r\n\r\nprint("Title:", info["title"])\r\nprint("Date:", info["date"])\r\nprint("URL:", info["url"])\r\nprint("Explanation:", info["explanation"])\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"exercises---public-api-practice",children:"Exercises - Public API Practice"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Weather Fetcher"}),"\r\nUse ",(0,t.jsx)(e.a,{href:"https://open-meteo.com/en/docs",children:"Open-Meteo"})," (no API key) to get the current temperature in your city."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Crypto Price Display"}),"\r\nUse ",(0,t.jsx)(e.a,{href:"https://www.coingecko.com/en/api/documentation",children:"CoinGecko API"})," to fetch Bitcoin and Ethereum prices in USD."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"SpaceX Launch Info"}),"\r\nFrom ",(0,t.jsx)(e.code,{children:"https://api.spacexdata.com/v4/launches/next"}),", print mission name, date, and rocket ID."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Trivia Game"}),"\r\nUse ",(0,t.jsx)(e.a,{href:"https://opentdb.com/api_config.php",children:"Open Trivia Database"})," to get 5 random questions. Ask the user to answer via REPL."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Daily Cat Picture"}),"\r\nUse ",(0,t.jsx)(e.a,{href:"https://thecatapi.com/",children:"The Cat API"})," to fetch a random cat image URL and print it."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"part-3---running-a-server-on-the-pico",children:"Part 3 - Running a server on the Pico"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import network, socket, time, json\r\n\r\n# --- Wi-Fi ---\r\nSSID = "your_wifi_name"\r\nPASSWORD = "your_wifi_password"\r\n\r\ndef wifi_connect():\r\n    wlan = network.WLAN(network.STA_IF)\r\n    wlan.active(True)    \r\n    wlan.connect(SSID, PASSWORD)\r\n    while not wlan.isconnected():\r\n        time.sleep(0.2)\r\n    return wlan\r\n\r\nwlan = wifi_connect()\r\nHOST = wlan.ifconfig()[0]\r\nprint("Pico listening at http://%s:80" % HOST)\r\n\r\n# --- HTTP helpers ---\r\ndef http_response(conn, code=200, ctype="application/json", body="{}"):\r\n    msg = "HTTP/1.1 %d OK\\r\\nContent-Type: %s\\r\\nAccess-Control-Allow-Origin: *\\r\\nContent-Length: %d\\r\\n\\r\\n%s" % (\r\n        code, ctype, len(body), body)\r\n    conn.sendall(msg)\r\n\r\ndef parse_request(req_bytes):\r\n    try:\r\n        head = req_bytes.decode().split("\\r\\n")[0]\r\n        method, path, _ = head.split(" ")\r\n        return method, path\r\n    except:\r\n        return None, None\r\n\r\ndef query_value(path, key, default=None):\r\n    if "?" not in path: return default\r\n    qs = path.split("?", 1)[1]\r\n    for pair in qs.split("&"):\r\n        if "=" in pair:\r\n            k, v = pair.split("=", 1)\r\n            if k == key: return v\r\n    return default\r\n\r\n# --- Server loop ---\r\naddr = socket.getaddrinfo("0.0.0.0", 80)[0][-1]\r\ns = socket.socket()\r\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\ns.bind(addr)\r\ns.listen(1)\r\n\r\nvalue=1\r\nwhile True:\r\n    conn, _ = s.accept()\r\n    try:\r\n        req = conn.recv(1024)\r\n        method, path = parse_request(req)\r\n        if not method:\r\n            http_response(conn, 400, "text/plain", "Bad Request")\r\n            continue\r\n\r\n        if path.startswith("/get"):\r\n            http_response(conn, body=json.dumps({"val": value}))\r\n\r\n        elif path.startswith("/set"):\r\n            value = int(query_value(path, "val", "0"))\r\n            http_response(conn, 200, "text/plain", f"Ok! Set value to {value}")\r\n\r\n        else:\r\n            http_response(conn, 200, "text/plain",\r\n                          "Endpoints: /get, /set?val={int}")\r\n    except Exception as e:\r\n        http_response(conn, 500, "text/plain", "Error: %s" % e)\r\n    finally:\r\n        conn.close()\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"exercises",children:"Exercises"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Smart Sensor"}),"\r\nCreate an API to retrieve sensor data."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Smart LED"}),"\r\nCreate an API to control a LED."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Communication"}),"\r\nMake a request to another pico!"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"part-4---creating-a-local-flask-server",children:"Part 4 - Creating a Local Flask Server"}),"\n",(0,t.jsxs)(e.p,{children:["We'll now ",(0,t.jsx)(e.strong,{children:"run a Flask server on your PC"})," and have the Pico W connect to it."]}),"\n",(0,t.jsx)(e.h3,{id:"install-flask",children:"Install Flask"}),"\n",(0,t.jsx)(e.p,{children:"On your PC:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install flask\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h3,{id:"minimal-flask-server-serverpy",children:["Minimal Flask Server (",(0,t.jsx)(e.code,{children:"server.py"}),")"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from flask import Flask, request, jsonify\r\n\r\napp = Flask(__name__)\r\n\r\n# Example data store\r\nmessages = []\r\n\r\n@app.route("/")\r\ndef index():\r\n    return "Hello from Flask!"\r\n\r\n@app.route("/api/echo", methods=["GET"])\r\ndef echo():\r\n    msg = request.args.get("msg", "")\r\n    return jsonify({"you_sent": msg})\r\n\r\n@app.route("/api/messages", methods=["POST"])\r\ndef add_message():\r\n    content = request.json\r\n    messages.append(content)\r\n    return jsonify({"status": "ok", "count": len(messages)})\r\n\r\n@app.route("/api/messages", methods=["GET"])\r\ndef get_messages():\r\n    return jsonify(messages)\r\n\r\nif __name__ == "__main__":\r\n    app.run(host="0.0.0.0", port=5000)\n'})}),"\n",(0,t.jsx)(e.p,{children:"Run with:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"python server.py\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"pico-w---talking-to-local-flask-server",children:"Pico W - Talking to Local Flask Server"}),"\n",(0,t.jsxs)(e.p,{children:["Replace ",(0,t.jsx)(e.code,{children:"SERVER_IP"})," with your computer's local IP (e.g., ",(0,t.jsx)(e.code,{children:"192.168.1.100"}),")."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import network\r\nimport urequests\r\nimport time\r\n\r\nSSID = "your_wifi_name"\r\nPASSWORD = "your_wifi_password"\r\nSERVER_IP = "192.168.1.100"\r\n\r\nwlan = network.WLAN(network.STA_IF)\r\nwlan.active(True)\r\nwlan.connect(SSID, PASSWORD)\r\nwhile not wlan.isconnected():\r\n    time.sleep(0.5)\r\n\r\n# GET request with query param\r\nurl = f"http://{SERVER_IP}:5000/api/echo?msg=HelloPico"\r\nr = urequests.get(url)\r\nprint(r.json())\r\nr.close()\r\n\r\n# POST request with JSON body\r\ndata = {"from": "Pico W", "text": "Hi server!"}\r\nurl = f"http://{SERVER_IP}:5000/api/messages"\r\nr = urequests.post(url, json=data)\r\nprint(r.json())\r\nr.close()\r\n\r\n# GET messages\r\nr = urequests.get(url)\r\nprint(r.json())\r\nr.close()\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"exercises---flask-interaction",children:"Exercises - Flask Interaction"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Temperature Logger"}),"\r\nCreate a ",(0,t.jsx)(e.code,{children:"/api/temp"})," endpoint in Flask that stores temperature readings from the Pico W (fake or real).\r\nPico sends a reading every 10 seconds."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"LED Control"}),"\r\nAdd a ",(0,t.jsx)(e.code,{children:"/api/led"})," endpoint that accepts ",(0,t.jsx)(e.code,{children:'"on"'}),"/",(0,t.jsx)(e.code,{children:'"off"'})," in JSON.\r\nPico polls this endpoint every second and turns an onboard LED on/off accordingly."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Two-Way Chat"}),"\r\nPico sends text to Flask, Flask stores it, and Pico retrieves all messages every 5 seconds."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"API Bridge"}),"\r\nFlask fetches data from a public API (e.g., weather) and serves it locally.\r\nPico only talks to Flask, not the internet directly."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Mini Game Leaderboard"}),"\r\nPico sends ",(0,t.jsx)(e.code,{children:"{player, score}"})," to Flask; Flask stores and returns top 5 scores."]}),"\n"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);