"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[8374],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},39510:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"iot/lesson2","title":"Audio-Video","description":"-----------------","source":"@site/docs/iot/lesson2.md","sourceDirName":"iot","slug":"/iot/lesson2","permalink":"/docs/iot/lesson2","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/iot/lesson2.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Audio-Video","slug":"lesson2","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Basics - Pins, Timers, ADC, PWM","permalink":"/docs/iot/lesson1"},"next":{"title":"WiFi","permalink":"/docs/iot/lesson3"}}');var s=r(74848),t=r(28453);const l={title:"Audio-Video",slug:"lesson2",sidebar_position:3},a=void 0,o={},d=[{value:"Wiring (Audio)",id:"wiring-audio",level:2},{value:"Part 1 - Making Sound with PWM",id:"part-1---making-sound-with-pwm",level:2},{value:"PWM Basics (Quick Theory)",id:"pwm-basics-quick-theory",level:3},{value:"Hello, Tone!",id:"hello-tone",level:3},{value:"Notes helper",id:"notes-helper",level:4},{value:"Melody Player (with rests)",id:"melody-player-with-rests",level:3},{value:"Exercises - Audio",id:"exercises---audio",level:3},{value:"Part 2 - Drawing on the Pico Explorer with PicoGraphics",id:"part-2---drawing-on-the-pico-explorer-with-picographics",level:2},{value:"Set Up the Display",id:"set-up-the-display",level:3},{value:"Pens, Clear, Text",id:"pens-clear-text",level:3},{value:"Shapes &amp; Animation Loop (basic)",id:"shapes--animation-loop-basic",level:3},{value:"Exercises - Display",id:"exercises---display",level:3},{value:"Part 3 - Putting It Together: Audio-Reactive Visuals",id:"part-3---putting-it-together-audio-reactive-visuals",level:2},{value:"Visual Metronome (with Click)",id:"visual-metronome-with-click",level:3},{value:"Mini &quot;Frequency Viz&quot; (maps frequency to bar width)",id:"mini-frequency-viz-maps-frequency-to-bar-width",level:3},{value:"Bigger Practice Set (Mix &amp; Match)",id:"bigger-practice-set-mix--match",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"wiring-audio",children:"Wiring (Audio)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Wire the ",(0,s.jsx)(n.strong,{children:"AUDIO"})," pin on the board to ",(0,s.jsx)(n.strong,{children:"GP2"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"part-1---making-sound-with-pwm",children:"Part 1 - Making Sound with PWM"}),"\n",(0,s.jsx)(n.h3,{id:"pwm-basics-quick-theory",children:"PWM Basics (Quick Theory)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A PWM signal flips between HIGH and LOW at a ",(0,s.jsx)(n.strong,{children:"frequency"})," (Hz)."]}),"\n",(0,s.jsx)(n.li,{children:"We want to emulate a sine wave for a specific frequency. The highest volume will be at 50% duty cycle."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hello-tone",children:"Hello, Tone!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from machine import Pin, PWM\r\nfrom time import sleep\r\n\r\npwm = PWM(Pin(2))\r\n\r\ndef tone(freq_hz, duty=32768):\r\n    pwm.freq(freq_hz)\r\n    pwm.duty_u16(duty)\r\n\r\ndef silence():\r\n    pwm.duty_u16(0)\r\n\r\n# Play three tones\r\ntone(440)   # A4\r\nsleep(0.5)\r\ntone(523)   # C5\r\nsleep(0.5)\r\ntone(659)   # E5\r\nsleep(0.5)\r\nsilence()\r\n\r\n# When done (optional):\r\n# pwm.deinit()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-helper",children:"Notes helper"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'NOTES = {\r\n    "C4": 261, "D4": 294, "E4": 329, "F4": 349, "G4": 392, "A4": 440, "B4": 494,\r\n    "C5": 523, "D5": 587, "E5": 659, "F5": 698, "G5": 784, "A5": 880, "B5": 988,\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"melody-player-with-rests",children:"Melody Player (with rests)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from machine import Pin, PWM\r\nfrom time import sleep\r\n\r\npwm = PWM(Pin(2))\r\npwm.duty_u16(0)\r\n\r\nNOTES = {"C4":261, "D4":294, "E4":329, "F4":349, "G4":392, "A4":440, "B4":494, "C5":523}\r\n\r\ndef play_note(name, duration=0.3, duty=30000):\r\n    if name == "REST" or name is None:\r\n        pwm.duty_u16(0)\r\n        sleep(duration)\r\n        return\r\n    freq = NOTES.get(name, 0)\r\n    if freq > 0:\r\n        pwm.freq(freq)\r\n        pwm.duty_u16(duty)\r\n        sleep(duration)\r\n        pwm.duty_u16(0)\r\n\r\nmelody = [\r\n    ("C4", 0.25), ("D4", 0.25), ("E4", 0.25), ("REST", 0.1),\r\n    ("E4", 0.25), ("D4", 0.25), ("C4", 0.25), ("REST", 0.2),\r\n    ("C4", 0.25), ("G4", 0.25), ("C5", 0.35),\r\n]\r\n\r\nfor name, dur in melody:\r\n    play_note(name, dur)\r\n\r\n# pwm.deinit()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"exercises---audio",children:"Exercises - Audio"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scales Up & Down"}),"\r\nPlay C major ascending and descending (C4->C5->C4), with 0.2s per note."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Volume Envelope"}),"\r\nFor each note, start with low ",(0,s.jsx)(n.code,{children:"duty_u16"}),", ramp up, then ramp down."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tempo Control"}),"\r\nAdd a ",(0,s.jsx)(n.code,{children:"bpm"})," parameter and convert beats to seconds (quarter note = 60/bpm)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arpeggiator"}),"\r\nCycle through a chord (e.g., C-E-G) at a set rate for 5 seconds."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"part-2---drawing-on-the-pico-explorer-with-picographics",children:"Part 2 - Drawing on the Pico Explorer with PicoGraphics"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Look on the ",(0,s.jsx)(n.a,{href:"https://github.com/pimoroni/pimoroni-pico/tree/main/micropython/modules/picographics",children:"pimoroni github repo"})," for the documentation."]})}),"\n",(0,s.jsx)(n.h3,{id:"set-up-the-display",children:"Set Up the Display"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from picographics import PicoGraphics, DISPLAY_PICO_EXPLORER\r\n\r\ndisplay = PicoGraphics(display=DISPLAY_PICO_EXPLORER)\r\nW, H = display.get_bounds()   # expected 240x240\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pens-clear-text",children:"Pens, Clear, Text"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from picographics import PicoGraphics, DISPLAY_PICO_EXPLORER\r\n\r\ndisplay = PicoGraphics(display=DISPLAY_PICO_EXPLORER)\r\nW, H = display.get_bounds()\r\n\r\nBLACK = display.create_pen(0, 0, 0)\r\nWHITE = display.create_pen(255, 255, 255)\r\nRED   = display.create_pen(255, 0, 0)\r\n\r\ndisplay.set_pen(BLACK)\r\ndisplay.clear()\r\n\r\ndisplay.set_pen(RED)\r\ndisplay.rectangle(10, 10, 100, 15)\r\n\r\ndisplay.set_pen(WHITE)\r\ndisplay.text("Hello IPW!", 10, 10, W, 2)  # (text, x, y, wrap, scale)\r\n\r\ndisplay.update()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"shapes--animation-loop-basic",children:"Shapes & Animation Loop (basic)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from picographics import PicoGraphics, DISPLAY_PICO_EXPLORER\r\nfrom time import sleep\r\n\r\ndisplay = PicoGraphics(display=DISPLAY_PICO_EXPLORER)\r\nW, H = display.get_bounds()\r\nbg = display.create_pen(10, 10, 40)\r\nfg = display.create_pen(240, 240, 240)\r\nball = display.create_pen(0, 200, 200)\r\n\r\nx, y = 30, 30\r\nvx, vy = 3, 2\r\nr = 12\r\n\r\nwhile True:\r\n    display.set_pen(bg); display.clear()\r\n    display.set_pen(fg); display.text("Bouncy!", 10, 10, W, 2)\r\n    display.set_pen(ball); display.circle(int(x), int(y), r)\r\n    display.update()\r\n\r\n    x += vx; y += vy\r\n    if x < r or x > W - r: vx = -vx\r\n    if y < r or y > H - r: vy = -vy\r\n    sleep(0.01)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"exercises---display",children:"Exercises - Display"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Centered Text"}),"\r\nWrite a helper ",(0,s.jsx)(n.code,{children:"draw_centered(text, y, pen, scale)"})," that measures text using ",(0,s.jsx)(n.code,{children:"display.measure_text(...)"})," and centers it."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Progress Bar"}),"\r\nDraw a horizontal bar that fills from 0% to 100% over 3 seconds."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Color Cycler"}),"\r\nAnimate the background hue over time (convert HSV->RGB)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Sprite Sheet (Simple)"}),'\r\nSimulate a 2-frame sprite: alternate between two rectangles (different colors) to "blink".']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"FPS Counter"}),"\r\nDisplay frames per second by counting frames in 1 second windows."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"part-3---putting-it-together-audio-reactive-visuals",children:"Part 3 - Putting It Together: Audio-Reactive Visuals"}),"\n",(0,s.jsx)(n.h3,{id:"visual-metronome-with-click",children:"Visual Metronome (with Click)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from machine import Pin, PWM\r\nfrom time import ticks_ms, ticks_diff, sleep\r\nfrom picographics import PicoGraphics, DISPLAY_PICO_EXPLORER\r\n\r\n# --- Audio ---\r\nBUZZER_PIN = 2\r\npwm = PWM(Pin(BUZZER_PIN))\r\npwm.duty_u16(0)\r\n\r\ndef click(freq=1000, dur_ms=40, duty=25000):\r\n    pwm.freq(freq)\r\n    pwm.duty_u16(duty)\r\n    sleep(dur_ms/1000)\r\n    pwm.duty_u16(0)\r\n\r\n# --- Display ---\r\ndisplay = PicoGraphics(display=DISPLAY_PICO_EXPLORER)\r\nW, H = display.get_bounds()\r\nBLACK = display.create_pen(0,0,0)\r\nWHITE = display.create_pen(255,255,255)\r\nACCENT = display.create_pen(0,200,120)\r\n\r\nBPM = 120\r\nbeat_ms = int(60000 / BPM)\r\nlast = ticks_ms()\r\nbeat = 0\r\n\r\nwhile True:\r\n    now = ticks_ms()\r\n    if ticks_diff(now, last) >= beat_ms:\r\n        last = now\r\n        beat = (beat + 1) % 4\r\n        click(1000 if beat == 0 else 800)\r\n\r\n    phase = ticks_diff(now, last) / beat_ms  # 0..1 within a beat\r\n    radius = int(20 + 40 * (1 - phase))\r\n\r\n    display.set_pen(BLACK); display.clear()\r\n    display.set_pen(WHITE)\r\n    display.text("METRONOME", 8, 8, W, 2)\r\n    display.text("BPM: %d" % BPM, 8, 30, W, 2)\r\n    display.set_pen(ACCENT)\r\n    display.circle(W//2, H//2, radius)\r\n    display.update()\r\n\r\n    sleep(0.005)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mini-frequency-viz-maps-frequency-to-bar-width",children:'Mini "Frequency Viz" (maps frequency to bar width)'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from machine import Pin, PWM\r\nfrom time import sleep\r\nfrom picographics import PicoGraphics, DISPLAY_PICO_EXPLORER\r\n\r\ndisplay = PicoGraphics(display=DISPLAY_PICO_EXPLORER)\r\nW, H = display.get_bounds()\r\nBG = display.create_pen(0,0,0)\r\nBAR = display.create_pen(255,180,0)\r\nTXT = display.create_pen(220,220,220)\r\n\r\nBUZZER_PIN = 2\r\npwm = PWM(Pin(BUZZER_PIN))\r\npwm.duty_u16(0)\r\n\r\nNOTES = [261, 294, 329, 349, 392, 440, 494, 523]  # C4..C5\r\n\r\ndef play_and_draw(freq, ms=300):\r\n    pwm.freq(freq)\r\n    pwm.duty_u16(28000)\r\n\r\n    display.set_pen(BG); display.clear()\r\n    display.set_pen(TXT)\r\n    display.text("Freq: %d Hz" % freq, 10, 10, W, 2)\r\n\r\n    # map 200..1000 Hz -> 0..W\r\n    width = int((freq - 200) * (W / (1000 - 200)))\r\n    width = max(0, min(W, width))\r\n\r\n    display.set_pen(BAR)\r\n    display.rectangle(0, H//2 - 20, width, 40)\r\n    display.update()\r\n\r\n    sleep(ms/1000)\r\n    pwm.duty_u16(0)\r\n    sleep(0.08)\r\n\r\nwhile True:\r\n    for f in NOTES:\r\n        play_and_draw(f)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"bigger-practice-set-mix--match",children:"Bigger Practice Set (Mix & Match)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Piano Keys UI"}),'\r\nDraw 4 on-screen "keys" (rectangles). Highlight the active key as you play a scale. Add button inputs (A/B/X/Y).']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Christmas Tree++"}),"\r\nAdd music to yesterday's Christmas tree."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Simon Says"}),"\r\nFlash a colored sequence (rectangles) while playing matching tones. Then wait for the user to repeat via buttons. Increase length each round."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rhythm Game"}),"\r\nDrop circles from the top at beat times; the user taps a button when they hit a target line. Score accuracy. Beep on hits."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scope-ish View"}),"\r\nFake an oscilloscope by drawing a sine curve for the current freq. (Use ",(0,s.jsx)(n.code,{children:"math.sin"})," to plot ",(0,s.jsx)(n.code,{children:"y = mid + amp*sin(2 * pi * f * x)"}),".)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real music!"}),"\r\nGet a ",(0,s.jsx)(n.strong,{children:"MIDI"})," file and transform it into tones using ",(0,s.jsx)(n.a,{href:"https://www.extramaster.net/tools/midiToArduino/",children:"this website"}),". Play the song!"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);