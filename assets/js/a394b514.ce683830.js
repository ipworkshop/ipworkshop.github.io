"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[2276],{4802:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/3_select_ctimer-ab28989c2af931a01babf92ea2db421e.png"},5700:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/11_route_pin_tool-c096070e42fcae9a8fc8d7b004e8fc21.png"},11992:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"autonomous_cars/programming/drivers/index","title":"PWM Control with CTIMER on the FRDM\u2013MCXN947 Board","description":"\ud83c\udfaf Objective:","source":"@site/docs/autonomous_cars/2.programming/2.drivers/index.md","sourceDirName":"autonomous_cars/2.programming/2.drivers","slug":"/autonomous_cars/programming/drivers/","permalink":"/docs/autonomous_cars/programming/drivers/","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/autonomous_cars/2.programming/2.drivers/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview of Key Functions","permalink":"/docs/autonomous_cars/programming/Functions Overview/"},"next":{"title":"Rust in Embedded","permalink":"/docs/embedded/"}}');var r=i(74848),t=i(28453);const c={},l="PWM Control with CTIMER on the FRDM\u2013MCXN947 Board",o={},d=[{value:"\ud83c\udfaf Objective:",id:"-objective",level:2},{value:"\ud83d\udd0d What are CTIMER and PWM?",id:"-what-are-ctimer-and-pwm",level:2},{value:"\ud83d\udda5\ufe0f Tools and Requirements",id:"\ufe0f-tools-and-requirements",level:2},{value:"\ud83e\udded Workspace Overview",id:"-workspace-overview",level:2},{value:"\ud83e\uddf1 Main Steps",id:"-main-steps",level:2},{value:"\ud83d\udd39 Step 1: Open Peripherals Perspective",id:"-step-1-open-peripherals-perspective",level:2},{value:"\ud83d\udd39 Step 2: Enable CTIMER and Set Mode",id:"-step-2-enable-ctimer-and-set-mode",level:2},{value:"\ud83d\udd39 Step 3: Resolve Clock Errors",id:"-step-3-resolve-clock-errors",level:2},{value:"\ud83d\udd39 Step 4: Configure Timer Frequency and Prescaler",id:"-step-4-configure-timer-frequency-and-prescaler",level:2},{value:"\ud83d\udd39 Step 5: Add and Configure PWM Channels",id:"-step-5-add-and-configure-pwm-channels",level:2},{value:"\ud83d\udd39 Step 6: Route the PWM Pin",id:"-step-6-route-the-pwm-pin",level:2},{value:"\ud83d\udd39 Step 7: Generate Code",id:"-step-7-generate-code",level:2},{value:"\ud83d\udd39 Step 8: Using PWM in Application Code",id:"-step-8-using-pwm-in-application-code",level:2},{value:"\u2699\ufe0f Advanced: Using Match Registers for Precise Duty Control",id:"\ufe0f-advanced-using-match-registers-for-precise-duty-control",level:2},{value:"Explanation of Ticks and Duty Translation",id:"explanation-of-ticks-and-duty-translation",level:3}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pwm-control-with-ctimer-on-the-frdmmcxn947-board",children:"PWM Control with CTIMER on the FRDM\u2013MCXN947 Board"})}),"\n",(0,r.jsx)(n.h2,{id:"-objective",children:"\ud83c\udfaf Objective:"}),"\n",(0,r.jsx)(n.p,{children:"Learn how to configure and generate PWM signals using the CTIMER peripheral in MCUXpresso IDE on the FRDM\u2013MCXN947 development board."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-what-are-ctimer-and-pwm",children:"\ud83d\udd0d What are CTIMER and PWM?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CTIMER (Counter/Timer)"})," is a versatile on-chip peripheral found in NXP microcontrollers that can operate as a timer, counter, or PWM generator.\n",(0,r.jsx)(n.strong,{children:"PWM (Pulse-Width Modulation)"})," is a technique to encode analog values using a digital signal by varying the duty cycle. It is widely used for motor control, LED dimming, and signal generation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-tools-and-requirements",children:"\ud83d\udda5\ufe0f Tools and Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IDE"}),": MCUXpresso IDE (v11.5.0 or later)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Board"}),": FRDM\u2013MCXN947 development kit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compiler"}),": GNU Arm Embedded Toolchain (bundled with IDE)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connectivity"}),": USB cable for board programming and debugging"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-workspace-overview",children:"\ud83e\udded Workspace Overview"}),"\n",(0,r.jsx)(n.p,{children:"When you open your project in MCUXpresso IDE:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Peripherals Perspective"}),": Configure on-chip peripherals visually."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problems View"}),": Displays configuration errors and quick-fix suggestions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pins Perspective"}),": Assign and route physical pins to peripheral functions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Project Explorer"}),": Browse source files and configuration."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"\ufe0f-step-by-step-pwm-configuration",children:"\u270f\ufe0f Step-by-Step PWM Configuration"}),"\n",(0,r.jsx)(n.h2,{id:"-main-steps",children:"\ud83e\uddf1 Main Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enable CTIMER Driver"})," in Peripheral Drivers section."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set Mode to PWM"})," and configure clock prescaler."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Define PWM Channels"})," and default duty cycles."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Route Pins"})," in Pins Perspective or via quick-fix."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Generate Code"})," and call the PWM update function in your application."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-1-open-peripherals-perspective",children:"\ud83d\udd39 Step 1: Open Peripherals Perspective"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In MCUXpresso IDE, click the ",(0,r.jsx)(n.strong,{children:"Peripherals"})," tab or switch via the perspective icon."]}),"\n",(0,r.jsxs)(n.li,{children:["Expand ",(0,r.jsx)(n.strong,{children:"Peripheral Drivers (Device specific)"})," and click ",(0,r.jsx)(n.strong,{children:"+"})," to add a new driver."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ERROR",src:i(92377).A+"",width:"1706",height:"893"})}),"\n",(0,r.jsx)(n.h2,{id:"-step-2-enable-ctimer-and-set-mode",children:"\ud83d\udd39 Step 2: Enable CTIMER and Set Mode"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Search for ",(0,r.jsx)(n.strong,{children:"ctimer"})," in the drivers list and press ",(0,r.jsx)(n.strong,{children:"OK"}),".\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(47538).A+"",width:"1782",height:"779"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the CTIMER instance list, select the desired timer (e.g., CTIMER1).\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(4802).A+"",width:"2512",height:"237"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Under ",(0,r.jsx)(n.strong,{children:"Mode"}),", choose ",(0,r.jsx)(n.strong,{children:"PWM"}),".\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(36698).A+"",width:"1189",height:"187"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-3-resolve-clock-errors",children:"\ud83d\udd39 Step 3: Resolve Clock Errors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Problems"})," tab (right corner)."]}),"\n",(0,r.jsxs)(n.li,{children:["Right-click any CTIMER_clock error (bulb icon) and apply the suggested fix to enable its clock.\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(67741).A+"",width:"1604",height:"539"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-4-configure-timer-frequency-and-prescaler",children:"\ud83d\udd39 Step 4: Configure Timer Frequency and Prescaler"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the CTIMER settings, set the ",(0,r.jsx)(n.strong,{children:"Input Clock Frequency"})," or ",(0,r.jsx)(n.strong,{children:"Prescaler"})," so that the timer base frequency supports your desired PWM frequency."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Explanation"}),": The prescaler divides the bus clock to achieve a timer tick rate matching the PWM period requirements."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ERROR",src:i(68056).A+"",width:"1761",height:"427"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Start the timer in initialization code."})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Explanation"}),": The CTIMER counter must be running for PWM outputs to be generated. Check \u201cStart the timer in initialization code\u201d so the timer starts automatically during peripherals initialization\u2014no manual CTIMER_StartTimer(...) call needed.\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(94347).A+"",width:"1612",height:"384"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Enter the ",(0,r.jsx)(n.strong,{children:"PWM Frequency"})," for the selected CTIMER channel.\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(31097).A+"",width:"1432",height:"452"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-5-add-and-configure-pwm-channels",children:"\ud83d\udd39 Step 5: Add and Configure PWM Channels"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.strong,{children:"PWM Channels"})," section, click ",(0,r.jsx)(n.strong,{children:"+"})," to add a channel."]}),"\n",(0,r.jsxs)(n.li,{children:["Choose a channel number (1\u2012n, avoid channel 0) and set the ",(0,r.jsx)(n.strong,{children:"Default Duty Cycle"})," (applied at initialization before runtime updates).\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(13533).A+"",width:"1124",height:"376"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-6-route-the-pwm-pin",children:"\ud83d\udd39 Step 6: Route the PWM Pin"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quick-Fix Method"}),": In the ",(0,r.jsx)(n.strong,{children:"Problems"})," view, right-click the PWM pin assignment error and accept the suggested route.\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(79780).A+"",width:"1505",height:"247"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pins Perspective Method"}),": Switch to ",(0,r.jsx)(n.strong,{children:"Pins"}),", search for ",(0,r.jsx)(n.code,{children:"ctimer<no>:match<pwm_channel_no>"}),", enable the pin, and set ",(0,r.jsx)(n.strong,{children:"Direction"})," to ",(0,r.jsx)(n.strong,{children:"Output"})," (Routing Details - bottom section).\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(5700).A+"",width:"1610",height:"320"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tip"}),": Verify the routed pin is available on a board header by consulting the FRDM\u2013MCXN947 schematic."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-7-generate-code",children:"\ud83d\udd39 Step 7: Generate Code"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["After completing configuration, click ",(0,r.jsx)(n.strong,{children:"Update Code"})," to regenerate driver initialization based on your configuration.\n",(0,r.jsx)(n.img,{alt:"ERROR",src:i(71164).A+"",width:"1602",height:"430"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-step-8-using-pwm-in-application-code",children:"\ud83d\udd39 Step 8: Using PWM in Application Code"}),"\n",(0,r.jsx)(n.p,{children:"Call the generated driver function to update duty cycle at runtime:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"CTIMER_UpdatePwmDutycycle(\n    CTIMER<no>_PERIPHERAL,                      // e.g., CTIMER1_PERIPHERAL\n    CTIMER<no>_PWM_PERIOD_CH,                   // the period channel defined in config\n    CTIMER<no>_PWM_<pwm_channel_no>_CHANNEL,    // the channel index\n    dutyPercent                                // new duty cycle in percent (integer)\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-advanced-using-match-registers-for-precise-duty-control",children:"\u2699\ufe0f Advanced: Using Match Registers for Precise Duty Control"}),"\n",(0,r.jsx)(n.p,{children:"When you need more precise control\u2014for example, fractional duty cycles for servos or fine-grained LED brightness\u2014you can calculate and write directly to the timer's match registers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"uint32_t periodTicks = CTIMER<no>_PERIPHERAL->MR[CTIMER<no>_PWM_PERIOD_CH];\nuint32_t pulseTicks  = (uint32_t)((periodTicks * dutyPercent) / 100.0);\nCTIMER<no>_PERIPHERAL->MR[<channelIndex>] = pulseTicks;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"explanation-of-ticks-and-duty-translation",children:"Explanation of Ticks and Duty Translation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"periodTicks"})}),": Total number of timer ticks for one full PWM period. It is read from the match register ",(0,r.jsx)(n.code,{children:"MR[CTIMER<no>_PWM_PERIOD_CH]"})," which defines the period channel."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Timer Tick Duration"}),": With a bus clock of, say, 48\u202fMHz and a prescaler value ",(0,r.jsx)(n.code,{children:"P"}),", each tick occurs every ",(0,r.jsx)(n.code,{children:"P / 48\u202f000\u202f000"})," seconds."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dutyPercent"})}),": Desired duty cycle as a percentage (0\u2013100)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Calculating ",(0,r.jsx)(n.code,{children:"pulseTicks"})]}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Multiply ",(0,r.jsx)(n.code,{children:"periodTicks"})," by ",(0,r.jsx)(n.code,{children:"dutyPercent / 100.0"})," to get the fractional portion of the period."]}),"\n",(0,r.jsxs)(n.li,{children:["Cast to ",(0,r.jsx)(n.code,{children:"uint32_t"})," to obtain an integer tick count."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Writing to ",(0,r.jsx)(n.code,{children:"MR[channelIndex]"})]}),": Setting this register tells the timer when (in ticks) to toggle the PWM output from high to low, achieving the specified duty cycle."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This method translates your percentage-based duty into concrete timer ticks, leveraging the full resolution of the CTIMER peripheral for precise PWM control."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"-congratulations",children:"\ud83c\udf89 Congratulations!"}),"\n",(0,r.jsx)(n.p,{children:"You have successfully configured and generated PWM signals on the FRDM\u2013MCXN947 board using the CTIMER peripheral. Explore varying frequencies, multiple channels, and advanced timer features to build complex control applications."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},13533:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/8_add_pwm_channels-89820823afb1e073a94063baa898363f.png"},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}},31097:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/7_set_pwm_freq-80cdc2ebcb1db5b39a542d39745a7391.png"},36698:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/4_mode_pwm-3f728a2af292d83892b2b6d81b1e72da.png"},47538:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/2_add_ctimer-6f5dd07aa6a54873ee6d3f42b10a8937.png"},67741:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/5_clock_enable-4258600ac56663b7219616ce530618b1.png"},68056:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/6_set_prescaler-800a4003c0dcb82bad84456d4db2bad5.png"},71164:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/12_update_code-45a1ebb87668a8a6589c5f61e06c9545.png"},79780:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/10_route_quick_fix-288da40d42ed93761de2bc94b2d7a5c8.png"},92377:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/1_peripheral_drivers-c79ce87699d9bf9db8c2f8401d046b65.png"},94347:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/9_start_timer-eeeb8c4fae9a7db15ef400d2755344a0.png"}}]);