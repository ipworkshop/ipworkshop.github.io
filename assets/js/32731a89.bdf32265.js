"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[3521],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},47071:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"desktop_applications/Slint/Expressions","title":"Expressions in Slint","description":"Introduction","source":"@site/docs/desktop_applications/03_Slint/05_Expressions.md","sourceDirName":"desktop_applications/03_Slint","slug":"/desktop_applications/Slint/Expressions","permalink":"/docs/desktop_applications/Slint/Expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/desktop_applications/03_Slint/05_Expressions.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Properties in Slint","permalink":"/docs/desktop_applications/Slint/Properties"},"next":{"title":"Positioning and Layouts in Slint","permalink":"/docs/desktop_applications/Slint/Layouts"}}');var t=s(74848),r=s(28453);const o={},l="Expressions in Slint",a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"String Concatenation",id:"string-concatenation",level:2},{value:"Logical and Comparison Operators",id:"logical-and-comparison-operators",level:2},{value:"Accessing Properties of Elements",id:"accessing-properties-of-elements",level:2},{value:"Ternary Operator",id:"ternary-operator",level:2},{value:"Statements in Expressions",id:"statements-in-expressions",level:2},{value:"Assignment",id:"assignment",level:3},{value:"Self-assignment",id:"self-assignment",level:3},{value:"Calling a Callback",id:"calling-a-callback",level:3},{value:"Conditional Statements",id:"conditional-statements",level:3},{value:"Empty Expression",id:"empty-expression",level:3}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"expressions-in-slint",children:"Expressions in Slint"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["Expressions allow you to ",(0,t.jsx)(n.strong,{children:"declare relationships"})," and ",(0,t.jsx)(n.strong,{children:"connect properties"})," in your user interface.",(0,t.jsx)(n.br,{}),"\n","When properties used in an expression change, the expression is ",(0,t.jsx)(n.strong,{children:"automatically re-evaluated"})," and the property is updated."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"export component Example {\n    // Declare a property of type int\n    in-out property<int> my-property;\n\n    // Bind width to the property\n    width: root.my-property * 20px;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"my-property"})," changes, the ",(0,t.jsx)(n.code,{children:"width"})," changes automatically."]}),"\n",(0,t.jsx)(n.h2,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,t.jsxs)(n.p,{children:["Arithmetic in expressions works like most programming languages, using ",(0,t.jsx)(n.code,{children:"*"}),", ",(0,t.jsx)(n.code,{children:"+"}),", ",(0,t.jsx)(n.code,{children:"-"}),", ",(0,t.jsx)(n.code,{children:"/"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"export component Example {\n    in-out property<int> p: 1 * 2 + 3 * 4; // same as (1 * 2) + (3 * 4)\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"string-concatenation",children:"String Concatenation"}),"\n",(0,t.jsxs)(n.p,{children:["Concatenate strings using ",(0,t.jsx)(n.code,{children:"+"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"logical-and-comparison-operators",children:"Logical and Comparison Operators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Logical: ",(0,t.jsx)(n.code,{children:"&&"})," (and), ",(0,t.jsx)(n.code,{children:"||"})," (or)"]}),"\n",(0,t.jsxs)(n.li,{children:["Comparison: ",(0,t.jsx)(n.code,{children:"=="}),", ",(0,t.jsx)(n.code,{children:"!="}),", ",(0,t.jsx)(n.code,{children:">"}),", ",(0,t.jsx)(n.code,{children:"<"}),", ",(0,t.jsx)(n.code,{children:">="}),", ",(0,t.jsx)(n.code,{children:"<="})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"accessing-properties-of-elements",children:"Accessing Properties of Elements"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"elementName.propertyName"})," syntax."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"export component Example {\n    foo := Rectangle {\n        x: 42px;\n    }\n    x: foo.x;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ternary-operator",children:"Ternary Operator"}),"\n",(0,t.jsxs)(n.p,{children:["Slint supports the ternary operator ",(0,t.jsx)(n.code,{children:"condition ? value1 : value2"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"export component Example inherits Window {\n    preferred-width: 100px;\n    preferred-height: 100px;\n\n    Rectangle {\n        touch := TouchArea {}\n        background: touch.pressed ? #111 : #eee;\n        border-width: 5px;\n        border-color: !touch.enabled ? #888\n            : touch.pressed ? #aaa\n            : #555;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"statements-in-expressions",children:"Statements in Expressions"}),"\n",(0,t.jsx)(n.h3,{id:"assignment",children:"Assignment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"clicked => { some-property = 42; }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"self-assignment",children:"Self-assignment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"clicked => { some-property += 42; }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"calling-a-callback",children:"Calling a Callback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"clicked => { root.some-callback(); }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"clicked => {\n    if (condition) {\n        foo = 42;\n    } else if (other-condition) {\n        bar = 28;\n    } else {\n        foo = 4;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"empty-expression",children:"Empty Expression"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-slint",children:"clicked => { }\n// or\nclicked => { ; }\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);