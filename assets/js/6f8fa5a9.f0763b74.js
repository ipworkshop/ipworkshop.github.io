"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[1217],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},8512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"cloud_operations/docker/docker-basics","title":"Docker Basics","description":"Essential Docker CLI commands","source":"@site/docs/cloud_operations/docker/docker-basics.md","sourceDirName":"cloud_operations/docker","slug":"/docker/basics","permalink":"/docs/docker/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/ipworkshop/ipworkshop.github.io/edit/main/docs/cloud_operations/docker/docker-basics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"docker-basics","title":"Docker Basics","description":"Essential Docker CLI commands","slug":"/docker/basics","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction and Setup","permalink":"/docs/docker/overview"},"next":{"title":"Docker Compose","permalink":"/docs/docker/compose"}}');var s=t(4848),o=t(8453);const r={id:"docker-basics",title:"Docker Basics",description:"Essential Docker CLI commands",slug:"/docker/basics",sidebar_position:2},a=void 0,c={},d=[{value:"Starting a container",id:"starting-a-container",level:2},{value:"Exercise 1",id:"exercise-1",level:2},{value:"Let&#39;s create our own docker image",id:"lets-create-our-own-docker-image",level:2},{value:"Why would we want to create multiple images for multiple containers?",id:"why-would-we-want-to-create-multiple-images-for-multiple-containers",level:3},{value:"Building an image",id:"building-an-image",level:3},{value:"Exercise 2",id:"exercise-2",level:2},{value:"Docker networking",id:"docker-networking",level:2},{value:"Exercise 3",id:"exercise-3",level:2},{value:"Docker persistence",id:"docker-persistence",level:2},{value:"Volumes",id:"volumes",level:3},{value:"Bind mounts",id:"bind-mounts",level:3},{value:"Exercise 4",id:"exercise-4",level:3},{value:"Exercise 5 (wrapping things up)",id:"exercise-5-wrapping-things-up",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"starting-a-container",children:"Starting a container"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Make the distinction between a ",(0,s.jsx)(n.strong,{children:"docker image"})," and a ",(0,s.jsx)(n.strong,{children:"docker container"}),". We can see the docker\nimage as the template, containing a set of instructions, used for creating and running a container.\nA docker container is the running instance of an image. This is similar to the distinction between\na program and a process (i.e. a process is a running instance of a program). You can read more\nabout this difference ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/compare/the-difference-between-docker-images-and-containers/#:~:text=A%20Docker%20container%20is%20a%20self%2Dcontained%2C%20runnable%20software%20application,containers%20over%20an%20application's%20lifecycle.",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"In order to start a Docker container we use the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cristian@cristianson:~/Desktop/ipw-docker$ docker run -it ubuntu:22.04 bash\nUnable to find image 'ubuntu:22.04' locally\n22.04: Pulling from library/ubuntu\n3713021b0277: Already exists \nDigest: sha256:340d9b015b194dc6e2a13938944e0d016e57b9679963fdeb9ce021daac430221\nStatus: Downloaded newer image for ubuntu:22.04\nroot@78f701a0d391:/# ls\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nroot@78f701a0d391:/# \n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If the above command requires superuser privileges, (i.e. run with ",(0,s.jsx)(n.strong,{children:"sudo"}),"), then follow these\n",(0,s.jsx)(n.a,{href:"https://docs.docker.com/engine/install/linux-postinstall/",children:"steps"})," to avoid prefixing every command\nwith ",(0,s.jsx)(n.strong,{children:"sudo"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Let's break down the arguments of the ",(0,s.jsx)(n.code,{children:"docker"})," command:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"run"}),", starts the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-i"}),", the container is started in ",(0,s.jsx)(n.strong,{children:"interactive"})," mode, which means that it can accept keyboard\ninput"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-t"}),", associates a terminal to the run command"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ubuntu:22.04"})," is the name of the ",(0,s.jsx)(n.strong,{children:"image"})," : ",(0,s.jsx)(n.strong,{children:"version"})," we want to use. Keep in mind that if we\ndo not explicitly specify the version, than the latest image will be pulled from\n",(0,s.jsx)(n.a,{href:"https://hub.docker.com/",children:"Dockerhub"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bash"}),", the command we want to run in the container"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Dockerhub is a public image repository that contains prebuilt images that we can download."})}),"\n",(0,s.jsxs)(n.p,{children:["If we want to see the local images we have downloaded from Dockerhub or created locally, we can do\n",(0,s.jsx)(n.code,{children:"docker image ls"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~/Desktop/ipw-docker$ docker image ls\nREPOSITORY          TAG       IMAGE ID       CREATED       SIZE\nubuntu              22.04     8a3cdc4d1ad3   4 weeks ago   77.9MB\nubuntu              latest    35a88802559d   7 weeks ago   78.1MB\n\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you do not know what an argument does or what is the purpose of a command, use ",(0,s.jsx)(n.code,{children:"man docker"})," or\n",(0,s.jsx)(n.code,{children:"docker help"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"We can also run non-interactive commands in containers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cristian@cristianson:~/Desktop/ipw-docker$ docker run ubuntu:22.04 ls\nbin\nboot\ndev\netc\nhome\nlib\nlib32\nlib64\nlibx32\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\ntmp\nusr\nvar\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This time, the command just shows us the output of ",(0,s.jsx)(n.strong,{children:"ls"})," and the container exits immediately. This\nis because we have run this command in the ",(0,s.jsx)(n.strong,{children:"foreground"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Try to also run the ",(0,s.jsx)(n.code,{children:"sleep 5"})," command and see what happens!"]})}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, however, running commands in the foreground is not ideal, especially if the command\ntakes a long time to run/output something. During that time, our terminal input is basically\nblocked and we have to open another terminal tab if we want to do something else. This is why, when\nwe are required to run a command or a script that takes a long time, it is better to run the\ncommand in the background."}),"\n",(0,s.jsxs)(n.p,{children:["In order to start a container in the background, we use the ",(0,s.jsx)(n.code,{children:"-d"})," option for the ",(0,s.jsx)(n.code,{children:"docker run"}),"\ncommand as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'cristian@cristianson:~/Desktop/ipw-docker$ docker run -d ubuntu:22.04 sleep 100\n8b3d484ae9ad92f669d2780faaa1b1dc850922029391bf13a12de84014610758\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps\nCONTAINER ID   IMAGE          COMMAND       CREATED         STATUS         PORTS     NAMES\n8b3d484ae9ad   ubuntu:22.04   "sleep 100"   2 seconds ago   Up 2 seconds             distracted_sammet\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The breakdown of the columns in the ",(0,s.jsx)(n.code,{children:"docker ps"})," output are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CONTAINER ID"})," - a unique id assigned by docker to each container."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IMAGE"})," - the name of the image that served as a template for this container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"COMMAND"})," - the command we have issued when starting the container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PORTS"})," - ports the container exposes for communication with the outside world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NAMES"})," - a name which is randomly assigned by Docker"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can change the name of the container when you are starting it. Do ",(0,s.jsx)(n.code,{children:"docker run --help"}),", find the\noption and then restart the ubuntu container with a new name! Do ",(0,s.jsx)(n.code,{children:"docker ps"})," to see if the name\nchanged. Also, whenever you are in doubt about what a command is supposed to do or what options it\ntakes, the general form is ",(0,s.jsx)(n.code,{children:"docker <command_name> --help"})," to list all of the available options."]})}),"\n",(0,s.jsxs)(n.p,{children:["Observe the fact that this time the container did not exit, and is running in the background. The\ncontainer will stop after the provided command, in our case, ",(0,s.jsx)(n.code,{children:"sleep 100"}),", finishes its execution.\nRunning ",(0,s.jsx)(n.code,{children:"docker ps"})," after 100 seconds confirms this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Run the ",(0,s.jsx)(n.code,{children:"docker ps"})," command after starting a container in the foreground! You need to open another\nterminal tab in order to do this."]})}),"\n",(0,s.jsxs)(n.p,{children:["After starting a container in the background using the ",(0,s.jsx)(n.code,{children:"-d"})," option, we can also connect to it\ninteractively with the ",(0,s.jsx)(n.code,{children:"docker exec"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'\ncristian@cristianson:~/Desktop/ipw-docker$ docker run -d ubuntu:22.04 sleep 1000\n48d58d5ab0a17c69dadcf5e3c6cfd8be519845cae3c67f41da19fe5ffc1f6382\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps\nCONTAINER ID   IMAGE          COMMAND        CREATED          STATUS          PORTS     NAMES\n48d58d5ab0a1   ubuntu:22.04   "sleep 1000"   11 seconds ago   Up 10 seconds             zen_hodgkin\ncristian@cristianson:~/Desktop/ipw-docker$ docker exec -it 48d58d5ab0a1 /bin/bash\nroot@48d58d5ab0a1:/# ls\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nroot@48d58d5ab0a1:/#\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The format of the ",(0,s.jsx)(n.code,{children:"docker exec"})," command is similar to that of ",(0,s.jsx)(n.code,{children:"docker run"}),". We have used the ",(0,s.jsx)(n.code,{children:"-it"}),"\nflags to start an interactive session with an attached terminal and we have chosen to run the\n",(0,s.jsx)(n.code,{children:"/bin/bash"})," command. It is important to note that the container is uniquely identified via its\n",(0,s.jsx)(n.strong,{children:"ID"})," or assigned name in the ",(0,s.jsx)(n.strong,{children:"NAMES"})," column."]}),"\n",(0,s.jsxs)(n.p,{children:["Now, we want to stop the running container because we its no fun to wait 1000 seconds to exit\nautomatically. In order to do this, we use the ",(0,s.jsx)(n.code,{children:"docker stop"})," command with the container's ",(0,s.jsx)(n.strong,{children:"ID"})," or\n",(0,s.jsx)(n.strong,{children:"NAME"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps\nCONTAINER ID   IMAGE          COMMAND        CREATED         STATUS         PORTS     NAMES\n48d58d5ab0a1   ubuntu:22.04   "sleep 1000"   5 minutes ago   Up 5 minutes             zen_hodgkin\ncristian@cristianson:~/Desktop/ipw-docker$ docker stop 48d58d5ab0a1\n48d58d5ab0a1\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\ncristian@cristianson:~/Desktop/ipw-docker$ docker ps -a\nCONTAINER ID   IMAGE          COMMAND        CREATED         STATUS                       PORTS     NAMES\n48d58d5ab0a1   ubuntu:22.04   "sleep 1000"   5 minutes ago   Exited (137) 3 seconds ago             zen_hodgkin\n8b3d484ae9ad   ubuntu:22.04   "sleep 100"    24 hours ago    Exited (0) 24 hours ago                distracted_sammet\na236cc7b0efa   ubuntu:22.04   "sleep 5"      24 hours ago    Exited (0) 24 hours ago                hardcore_ritchie\n94ef886a0e61   ubuntu:22.04   "sleep 1"      24 hours ago    Exited (0) 24 hours ago                serene_keller\nc7591793567d   ubuntu:22.04   "ls"           24 hours ago    Exited (0) 24 hours ago                adoring_jang\nd5cd0c63b9bb   ubuntu:22.04   "ps aux"       24 hours ago    Exited (0) 24 hours ago                condescending_mcclintock\nf81e1edf1b36   ubuntu:22.04   "lsdir"        24 hours ago    Created                                condescending_wu\n77fa7ff22c40   ubuntu:22.04   "ls"           24 hours ago    Exited (0) 24 hours ago                pedantic_lewin\n707ae3470fe6   ubuntu:22.04   "ps -ef"       24 hours ago    Exited (0) 24 hours ago                exciting_heisenberg\ncf3998b22236   ubuntu:22.04   "cat"          24 hours ago    Exited (0) 24 hours ago                bold_ritchie\n78f701a0d391   ubuntu:22.04   "bash"         25 hours ago    Exited (130) 24 hours ago              unruffled_feistel\n081fcd62be22   ubuntu         "bash"         25 hours ago    Exited (130) 25 hours ago              interesting_swanson\nf65bb2661f94   ubuntu         "bash"         25 hours ago    Exited (130) 25 hours ago              friendly_liskov\n5b7f19201652   alpine         "shell"        25 hours ago    Created                                youthful_roentgen\neb2c9ced368b   alpine         "bash"         25 hours ago    Created                                magical_satoshi\n5b27ae6a1c47   alpine         "bash"         25 hours ago    Created                                epic_volhard\ncristian@cristianson:~/Desktop/ipw-docker$\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We can see that the container is no longer running. Sometimes the stop command takes a while, so\ndo not abort it. Also, if we pass the ",(0,s.jsx)(n.code,{children:"-a"})," argument to the ",(0,s.jsx)(n.code,{children:"docker stop"})," command, it will also list\nthe containers that were stopped. We can see that the first container, ",(0,s.jsx)(n.strong,{children:"zen_hodgkin"})," is the one\nwe stopped earlier."]}),"\n",(0,s.jsx)(n.h2,{id:"exercise-1",children:"Exercise 1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start a container of your choice in background. Name it 'IPW-ROCKS'."}),"\n",(0,s.jsxs)(n.li,{children:["Once started, connect to the container and install the ",(0,s.jsx)(n.code,{children:"fzf"})," tool."]}),"\n",(0,s.jsx)(n.li,{children:"Disconnect from the container."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW!"})," Try to pause and unpause the container. After each command, do a ",(0,s.jsx)(n.code,{children:"docker ps"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Stop the container."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Completely remove the stopped container."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"You must start your container with a long running command or script, otherwise it will exit\nimmediately."}),(0,s.jsxs)(n.p,{children:["Also, ",(0,s.jsx)(n.strong,{children:"you are not allowed"})," to use Google to search how to do the pause/unpause/container removal.\n\ud83d\udc80 Use ",(0,s.jsx)(n.code,{children:"docker help"})," and ",(0,s.jsx)(n.code,{children:"grep"})," in order to find what you need. \ud83d\ude09"]})]}),"\n",(0,s.jsx)(n.h2,{id:"lets-create-our-own-docker-image",children:"Let's create our own docker image"}),"\n",(0,s.jsx)(n.h3,{id:"why-would-we-want-to-create-multiple-images-for-multiple-containers",children:"Why would we want to create multiple images for multiple containers?"}),"\n",(0,s.jsx)(n.p,{children:"So far, we have used the containers interactively. Most of the times, however, this is not the case.\nA container is a separate unit of computing with a well defined purpose. That is, it should do one\nsingle thing, and do it well."}),"\n",(0,s.jsx)(n.p,{children:"For example, we might have a web application with multiple components, and we have decided to split\nencapsulate each component in its own docker container. That is:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"a database container"}),"\n",(0,s.jsx)(n.li,{children:"a backend container"}),"\n",(0,s.jsx)(n.li,{children:"a frontend container"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each of the above containers does one thing, and in the case of a backend or frontend change, the\nrest of the containers remain unaffected and running. Even if one container crashes, we can easily\nrestart it without affecting the rest of the components."}),"\n",(0,s.jsx)(n.h3,{id:"building-an-image",children:"Building an image"}),"\n",(0,s.jsx)(n.p,{children:"The flow of building an image and deploying a container looks like this:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Docker image build",src:t(9859).A+"",title:"Build process",width:"784",height:"482"})}),"\n",(0,s.jsxs)(n.p,{children:["In order to create our custom container, we need to create a custom template, that is, a custom\ndocker image. To accomplish this, we will create a ",(0,s.jsx)(n.code,{children:"Dockerfile"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'\nFROM ubuntu:22.04\n\nARG DEBIAN_FRONTEND=noninteractive\nARG DEBCONF_NONINTERACTIVE_SEEN=true\n\nENV HELLO="hello"\n\nRUN apt-get update\nRUN apt-get install -y firefox\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's break down each line of the above document:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FROM"})," - the first instruction in each Dockerfile, specifies the base container image, which means\nthat subsequent modifications will add/remove from this image."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ARG"})," - represents a variable that is available only when the container is built and can be\nreferenced throughout the Dockerfile."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ENV"})," - sets an environment variable that will be available in the resulting container at\nruntime."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RUN"})," - runs a command when building the image. In this case, the resulting image will have\n",(0,s.jsx)(n.code,{children:"firefox"})," pre-installed."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can read more about the differences between ",(0,s.jsx)(n.strong,{children:"ARG"})," and ",(0,s.jsx)(n.strong,{children:"ENV"}),"\n",(0,s.jsx)(n.a,{href:"https://vsupalov.com/docker-arg-vs-env/",children:"here"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Once we have created the ",(0,s.jsx)(n.code,{children:"Dockerfile"}),", we can build our image using the following command:\n",(0,s.jsx)(n.code,{children:"docker build -t my-container ."})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~/Desktop/ipw-docker$ docker build -t my-container .\n[+] Building 30.7s (7/7) FINISHED\n[...]\n => exporting to image                                                                                                                                                                    1.0s \n => => exporting layers                                                                                                                                                                   0.9s \n => => writing image sha256:7493be1166b06d3521599a21c1ece1c5b4e2d438c3dacef0935e74d927aa875e                                                                                              0.0s \n => => naming to docker.io/library/my-container\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Let's break down the arguments to the ",(0,s.jsx)(n.code,{children:"docker build"})," command:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-t"})," - specifies the tag of the image."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"my-container"})," is the assigned tag."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"."})," - specifies that the Dockerfile is located in the current directory"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["In larger projects, we may have multiple Dockerfiles, each specifying the recipe for another image.\nIt is useful, then, to name them differently. However, by default, Docker recognizes only files\nnamed ",(0,s.jsx)(n.code,{children:"Dockerfile"}),". In order to have files named ",(0,s.jsx)(n.code,{children:"Dockerfile.backend"})," or ",(0,s.jsx)(n.code,{children:"Dockerfile.frontend"})," or\nany other name we may come up with, we need to specify this to the ",(0,s.jsx)(n.code,{children:"docker build"})," command via the\n",(0,s.jsx)(n.code,{children:"-f"})," parameter. See ",(0,s.jsx)(n.code,{children:"docker build --help"})," for more info."]})}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have built our image, let's run ",(0,s.jsx)(n.code,{children:"docker image ls"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cristian@cristianson:~/Desktop/ipw-docker$ docker image ls\nREPOSITORY         TAG       IMAGE ID       CREATED          SIZE                                                \nmy-container       latest    7493be1166b0   13 minutes ago   369MB\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is the confirmation that the build was successful. Let's create a brand new container from this\nimage and verify if the environment variable has been correctly set up:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~/Desktop/ipw-docker$ docker run -it my-container bash\nroot@40b9e8dae8f1:/# echo $HELLO\nhello\nroot@40b9e8dae8f1:/# \n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Nice! We did it. We could have also checked that the image had the ",(0,s.jsx)(n.strong,{children:"HELLO"})," environment variable\nset by using the ",(0,s.jsx)(n.code,{children:"docker image inspect"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'\ncristian@cristianson:~/Desktop/ipw-docker$ docker image inspect my-container\n[\n    {\n        "Id": "sha256:7493be1166b06d3521599a21c1ece1c5b4e2d438c3dacef0935e74d927aa875e",\n        "RepoTags": [\n            "my-container:latest"\n        ],\n        "RepoDigests": [],\n        "Parent": "",\n        "Comment": "buildkit.dockerfile.v0",\n        "Created": "2024-08-01T13:51:50.003474082+03:00",\n        "Container": "",\n        "ContainerConfig": {\n            "Hostname": "",\n            "Domainname": "",\n            "User": "",\n            "AttachStdin": false,\n            "AttachStdout": false,\n            "AttachStderr": false,\n            "Tty": false,\n            "OpenStdin": false,\n            "StdinOnce": false,\n            "Env": null,\n            "Cmd": null,\n            "Image": "",\n            "Volumes": null,\n            "WorkingDir": "",\n            "Entrypoint": null,\n            "OnBuild": null,\n            "Labels": null\n        },\n        "DockerVersion": "",\n        "Author": "",\n        "Config": {\n            "Hostname": "",\n            "Domainname": "",\n            "User": "",\n            "AttachStdin": false,\n            "AttachStdout": false,\n            "AttachStderr": false,\n            "Tty": false,\n            "OpenStdin": false,\n            "StdinOnce": false,\n            "Env": [\n                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",\n                "HELLO=hello"\n            ],\n            "Cmd": [\n                "/bin/bash"\n            ],\n            "Image": "",\n            "Volumes": null,\n            "WorkingDir": "",\n            "Entrypoint": null,\n            "OnBuild": null,\n            "Labels": {\n                "org.opencontainers.image.ref.name": "ubuntu",\n                "org.opencontainers.image.version": "22.04"\n            }\n        },\n        "Architecture": "amd64",\n        "Os": "linux",\n        "Size": 369369133,\n        "GraphDriver": {\n            "Data": {\n                "LowerDir": "/var/lib/docker/overlay2/p323vqywxcogfgl6sadeqwrsc/diff:/var/lib/docker/overlay2/372a31c779498a88a96829322ca93f496d0cf79a3a23f4c46b276f6670199ccc/diff",\n                "MergedDir": "/var/lib/docker/overlay2/aakuflif4l5nqvh24azlltsw4/merged",\n                "UpperDir": "/var/lib/docker/overlay2/aakuflif4l5nqvh24azlltsw4/diff",\n                "WorkDir": "/var/lib/docker/overlay2/aakuflif4l5nqvh24azlltsw4/work"\n            },\n            "Name": "overlay2"\n        },\n        "RootFS": {\n            "Type": "layers",\n            "Layers": [\n                "sha256:931b7ff0cb6f494b27d31a4cbec3efe62ac54676add9c7469560302f1541ecaf",\n                "sha256:7b75401998b8840828c675a5956ab91e405aec86d363e76b4a0d645bb1a8414e",\n                "sha256:c7e0e739bfbbcc8f59a777e8bb57b845ece9598a8a1df45833dc215104ad7dd1"\n            ]\n        },\n        "Metadata": {\n            "LastTagTime": "2024-08-01T13:51:50.961377181+03:00"\n        }\n    }\n]\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We can see that in the ",(0,s.jsx)(n.code,{children:"Env"})," section we have our ",(0,s.jsx)(n.strong,{children:"HELLO"})," env variable."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Each Docker image is comprised of layers. Each command in the Dockerfile basically adds a new layer\nthat can be cached and later be used in other builds. Talking about the very inner workings of\nDocker is beyond the scope of this workshop, but you can read more information here:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.docker.com/storage/storagedriver/",children:"Docker storage driver"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://cloudyuga.guru/blogs/understanding-docker-image-optimization-techniques-for-effective-deployment/#:~:text=Minimize%20The%20Number%20Of%20Layers,-In%20this%20technique&text=Each%20instruction%20like%20FROM%2C%20COPY,size%20of%20the%20resulting%20image.",children:"Docker image optimization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/47079114/should-i-minimize-the-number-of-docker-layers",children:"Number of docker layers"})}),"\n"]})]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["With time, a system can accumulate lots of local images, containers and build caches. That means\nthat a user may end up with 0 space left on its laptop/PC. So, it is useful to see how much storage\nDocker occupies. In order to do this, run the ",(0,s.jsx)(n.code,{children:"docker system df"})," command. Ask one of the course\ninstructors for more details about the output and how you can free up disk space."]})}),"\n",(0,s.jsx)(n.h2,{id:"exercise-2",children:"Exercise 2"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Write a ",(0,s.jsx)(n.code,{children:"Dockerfile.image"})," file containing the instructions for generating a container image\nbased on ",(0,s.jsx)(n.code,{children:"ubuntu"}),". The image should have the ",(0,s.jsx)(n.code,{children:"24.04"})," version."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Create a file called ",(0,s.jsx)(n.code,{children:"test.txt"})," in the same folder with ",(0,s.jsx)(n.code,{children:"Dockerfile.image"}),". Copy this file\ninside the container with some content inside."]}),"\n",(0,s.jsxs)(n.li,{children:["Set an environment variable called ",(0,s.jsx)(n.strong,{children:"MESSAGE"})," to whatever message you want."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Using ",(0,s.jsx)(n.code,{children:"echo"}),", append the output of the environment variable to the copied file."]}),"\n",(0,s.jsx)(n.li,{children:"Using a specific command, create the image such as, when running it non-interactively, it\noutputs the contents of the file. Basically, add a default for executing the container."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Have a look on the ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/reference/dockerfile/",children:"Dockerfile reference"})," for the\nrequired commands."]})}),"\n",(0,s.jsx)(n.h2,{id:"docker-networking",children:"Docker networking"}),"\n",(0,s.jsx)(n.p,{children:"The Docker networking subsystem is plugable and uses a variety of drivers in order to offer implicit\nbehavior for network components. Why do we care about the networking subsystem? Because in order to\nbuild useful apps, we need to make the containers communicate with each other. Moreover, we may\neven want to isolate the traffic between certain containers and create sub-networks."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can read for about docker networking ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/network/",children:"here"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Containers residing in the same network can communicate with each other using ",(0,s.jsx)(n.strong,{children:"named DNS"}),". This\nmeans that we can access a container using its name, and not necessarily its IP. In order to\ncommunicate with the outside world (the host machine, containers which are outside the network),\nyou must expose ",(0,s.jsx)(n.a,{href:"https://www.mend.io/blog/how-to-expose-ports-in-docker/",children:"ports"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Moving forward, we are going to demonstrate how the ",(0,s.jsx)(n.code,{children:"bridge"})," networks work in Docker. You can read\nmore about them ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/network/drivers/bridge/",children:"here"}),". We are going to start two\ncontainers and try to send pings from one another to see if anything happens. In order to do this,\nit is easier if you open two separate terminal tabs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker container run --name first -it alpine ash\n/ # \n\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker container run --name second -it alpine ash\n/ # \n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This time, we have started two alpine containers, because they are more lightweight than the ubuntu\nones. ",(0,s.jsx)(n.code,{children:"ash"})," is the default shell for the ",(0,s.jsx)(n.code,{children:"alpine"})," containers. Now, if we try to ping from the ",(0,s.jsx)(n.code,{children:"first"}),"\ncontainer the ",(0,s.jsx)(n.code,{children:"second"})," container, we see that this does not work. Same story if we try the same\nthing from the ",(0,s.jsx)(n.code,{children:"second"})," container."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker container run --name first -it alpine ash\n/ # ping second\nping: bad address 'second'\n/ # \n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker container run --name second -it alpine ash\n/ # ping first\nping: bad address 'first'\n/ # \n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If we do an ",(0,s.jsx)(n.code,{children:"ifconfig"})," inside one of the containers, we see that there are only two networks\navailable to us right now:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"lo"}),"\n",(0,s.jsx)(n.li,{children:"eth0"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can ask the course instructors about more information about these two networks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\n/ # ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:67 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:8933 (8.7 KiB)  TX bytes:216 (216.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\n/ # \n\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's make these containers communicate! First, create a docker network object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker network create -d bridge my-bridge\n8508d7585c6b8145da8afac4bf159de14293c4fd11ebcf2662e3367fc46d92c9\ncristian@cristianson:~$ docker network ls\nNETWORK ID     NAME        DRIVER    SCOPE\n9ccf3f0b6346   bridge      bridge    local\n1e22e9263c46   host        host      local\n8508d7585c6b   my-bridge   bridge    local\n294f9f02c5c1   none        null      local\n\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"docker network --help"})," to find out more about the command. Ask one of the course instructors\nfor more information if necessary."]})}),"\n",(0,s.jsxs)(n.p,{children:["Listing the available networks with ",(0,s.jsx)(n.code,{children:"docker network ls"})," shows the newly created ",(0,s.jsx)(n.code,{children:"my-bridge"})," network\nof type ",(0,s.jsx)(n.code,{children:"bridge"}),". Now, let's connect the two containers to the network. Keep in mind we are adding\nthe containers to the network while they are still running. We could have also added them at creation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker network connect my-bridge first\ncristian@cristianson:~$ docker network connect my-bridge second\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It was that easy! Running an ",(0,s.jsx)(n.code,{children:"ifconfig"})," now yields:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\n/ # ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:129 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:18254 (17.8 KiB)  TX bytes:216 (216.0 B)\n\neth1      Link encap:Ethernet  HWaddr 02:42:AC:14:00:02  \n          inet addr:172.20.0.2  Bcast:172.20.255.255  Mask:255.255.0.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:66 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:9143 (8.9 KiB)  TX bytes:0 (0.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We have one extra network interface, ",(0,s.jsx)(n.code,{children:"eth1"}),". Let's ping again the ",(0,s.jsx)(n.code,{children:"second"})," container from ",(0,s.jsx)(n.code,{children:"first"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\n/ # ping -c2 second\nPING second (172.20.0.3): 56 data bytes\n64 bytes from 172.20.0.3: seq=0 ttl=64 time=0.328 ms\n64 bytes from 172.20.0.3: seq=1 ttl=64 time=0.181 ms\n\n--- second ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.181/0.254/0.328 ms\n/ # \n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nice! This time everything works as expected. Observe the fact that we have used the container's\nname and not the IP. You can stop and remove the containers now."}),"\n",(0,s.jsx)(n.h2,{id:"exercise-3",children:"Exercise 3"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a network called ",(0,s.jsx)(n.code,{children:"ipw"})," of type ",(0,s.jsx)(n.code,{children:"bridge"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Create two containers and assign them to the ",(0,s.jsx)(n.code,{children:"ipw"})," network at creation."]}),"\n",(0,s.jsx)(n.li,{children:"Check if the containers can communicate."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," In another terminal tab, do ",(0,s.jsx)(n.code,{children:"docker network inspect ipw"})," and comment on the output with\none of the course instructors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Do a ",(0,s.jsx)(n.code,{children:"cat /etc/hosts"})," in each container and comment on the output with one of the course\ninstructors."]}),"\n",(0,s.jsx)(n.li,{children:"Stop the containers, remove them and also remove the newly created network."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["You are not allowed to use Google! Use ",(0,s.jsx)(n.code,{children:"docker <command_name> --help"})," whenever you can to get more\ninformation, or ask one of the course instructors."]})}),"\n",(0,s.jsx)(n.h2,{id:"docker-persistence",children:"Docker persistence"}),"\n",(0,s.jsx)(n.p,{children:"In Docker, data we create or edit inside a container is not persisted in the outside world. This is\ndue to the way Docker works and the particularities of its filesystem. Let's illustrate this:"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"You can read more about this here:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://mobylab.docs.crescdi.pub.ro/docs/softwareDevelopment/laboratory1/persistence",children:"MobyLab"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt",children:"OverlaysFs"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt",children:"AuFs"})}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"volumes",children:"Volumes"}),"\n",(0,s.jsxs)(n.p,{children:["In order to persist data from a container, Docker uses a mechanism called ",(0,s.jsx)(n.strong,{children:"volumes"}),". These volumes\nrepresent a mapping between files in the container and files on the host system. The major advantage\nof Docker volume is the fact that they are not tied to the lifetime of the container they are\nattached to. This means that even if a container crashes, stops or is deleted, its data will still\npersist in the outside world, because volumes are an outside abstraction that are just linked to\ncontainer, but have a standalone lifetime. Other advantages of volumes include:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"easy migration between containers and machines"}),"\n",(0,s.jsx)(n.li,{children:"can be configured via the CLI or Docker API"}),"\n",(0,s.jsxs)(n.li,{children:["can be shared between multiple container, which means that volumes represent a way of\n",(0,s.jsx)(n.em,{children:"communication"})," via storage"]}),"\n",(0,s.jsx)(n.li,{children:"by employing different storage drivers, volumes can be used to persist data on remote machines,\ncloud environments, network drives etc."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Volumes managed by the Docker engine are also called ",(0,s.jsx)(n.strong,{children:"named volumes"}),". There are multiple ways of\ndefining volumes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["by using the ",(0,s.jsx)(n.strong,{children:"VOLUME"})," command inside the Dockerfile when creating the image, see the\n",(0,s.jsx)(n.a,{href:"https://docs.docker.com/reference/dockerfile/#volume",children:"Docker reference"})]}),"\n",(0,s.jsx)(n.li,{children:"at runtime, when creating a volume"}),"\n",(0,s.jsxs)(n.li,{children:["with a docker compose file (more on that later) and the docker volume API: ",(0,s.jsx)(n.code,{children:"docker volume create"}),",\n",(0,s.jsx)(n.code,{children:"docker volume ls"}),", etc."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's see how we can create a volume a runtime with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker container run --name ipw -d -v /test alpine sh -c 'ping 8.8.8.8 > /test/ping.txt'\n3e6beddbd15e43365be7f863023a43cffcdbab86916d78c553ec0822b58f9b6a4\ncristian@cristianson:~$ docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS        PORTS     NAMES\n3e6beddbd15e   alpine    \"sh -c 'ping 8.8.8.8\u2026\"   2 seconds ago   Up 1 second             ipw\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"-v"})," argument followed by the volume name defines a volume at the ",(0,s.jsx)(n.code,{children:"/test"})," path inside the\ncontainer. Every file we create or modify in that folder will basically alter the volume. Also note\nthat we are using a long running command, ",(0,s.jsx)(n.code,{children:"sh -c 'ping 8.8.8.8 > /test/ping.txt'"}),", in order to\ncontinuously append data to the file."]}),"\n",(0,s.jsxs)(n.p,{children:["Now, if we do a ",(0,s.jsx)(n.code,{children:"docker volume ls"})," we should see:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ docker volume ls\nDRIVER    VOLUME NAME\nlocal     a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's see if we can get more information about our newly created volume:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'\ncristian@cristianson:~$ docker volume inspect a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065\n[\n    {\n        "CreatedAt": "2024-08-02T12:20:22+03:00",\n        "Driver": "local",\n        "Labels": {\n            "com.docker.volume.anonymous": ""\n        },\n        "Mountpoint": "/var/lib/docker/volumes/a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065/_data",\n        "Name": "a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065",\n        "Options": null,\n        "Scope": "local"\n    }\n]\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Mountpoint"})," label specifies the location on the host machine were the volume data is stored. If\nwe list the contents of that folder than we would get the following output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ sudo ls  /var/lib/docker/volumes/a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065/_data\n[sudo] password for cristian: \nping.txt\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Doing a ",(0,s.jsx)(n.code,{children:"cat"})," inside the file we get:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ sudo cat  /var/lib/docker/volumes/a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065/_data/ping.txt\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=57 time=20.006 ms\n64 bytes from 8.8.8.8: seq=1 ttl=57 time=20.352 ms\n64 bytes from 8.8.8.8: seq=2 ttl=57 time=18.195 ms\n64 bytes from 8.8.8.8: seq=3 ttl=57 time=18.668 ms\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, if we stop and remove the container, with"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"docker container stop ipw"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"docker container rm ipw"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"we see that the volume data is still intact, event though the container was destroyed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~$ sudo cat  /var/lib/docker/volumes/a5ec5808eb58a6cc5551bd5f979f038f99015668f79314bec28ada192880d065/_data/ping.txt\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=57 time=20.006 ms\n64 bytes from 8.8.8.8: seq=1 ttl=57 time=20.352 ms\n64 bytes from 8.8.8.8: seq=2 ttl=57 time=18.195 ms\n64 bytes from 8.8.8.8: seq=3 ttl=57 time=18.668 ms\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"This proves the fact that the volume and container have separate lifetimes."}),"\n",(0,s.jsx)(n.h3,{id:"bind-mounts",children:"Bind mounts"}),"\n",(0,s.jsxs)(n.p,{children:["Besides volumes, we also have the concept of a ",(0,s.jsx)(n.strong,{children:"bind mount"}),". These are somewhat similar, the main\ndifference being that bind mounts are not managed by Docker, but by the file system of the host\nmachine and can be accessed by any external process which does not belong to Docker. A bind mount is,\nin its purest form, a path to a location in the host machine, while a volume is a Docker abstraction\nthat behind the scenes uses bind mounts. All in all, bind mounts allow us to ",(0,s.jsx)(n.strong,{children:"import"})," and access\nfolders, files and paths from the host machine in our Docker container and persist any modification."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can read more about volumes and bind mounts ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/storage/bind-mounts/",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"We can add a bind mount to a container in a similar fashion, when we are creating it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"\ncristian@cristianson:~/Desktop/ipw-docker$ docker container run --name first -d --mount type=bind,source=/home/cristian/Desktop/ipw-docker/test.txt,target=/root/test.txt alpine sh -c 'ping 8.8.8.8 > /root/test.txt'\n8438bfb2f16d940770ed3e4ba48cb67428e78ff530ec73de859a5f168d36e8ab\ncristian@cristianson:~/Desktop/ipw-docker$ cat test.txt \nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=57 time=21.369 ms\n64 bytes from 8.8.8.8: seq=1 ttl=57 time=20.204 ms\n64 bytes from 8.8.8.8: seq=2 ttl=57 time=20.705 ms\n64 bytes from 8.8.8.8: seq=3 ttl=57 time=18.625 ms\n64 bytes from 8.8.8.8: seq=4 ttl=57 time=20.626 ms\n64 bytes from 8.8.8.8: seq=5 ttl=57 time=20.248 ms\n64 bytes from 8.8.8.8: seq=6 ttl=57 time=18.777 ms\ncristian@cristianson:~/Desktop/ipw-docker$ docker container stop first\nfirst\ncristian@cristianson:~/Desktop/ipw-docker$ docker container rm first\nfirst\ncristian@cristianson:~/Desktop/ipw-docker$ cat test.txt \nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=57 time=21.369 ms\n64 bytes from 8.8.8.8: seq=1 ttl=57 time=20.204 ms\n64 bytes from 8.8.8.8: seq=2 ttl=57 time=20.705 ms\n64 bytes from 8.8.8.8: seq=3 ttl=57 time=18.625 ms\n64 bytes from 8.8.8.8: seq=4 ttl=57 time=20.626 ms\n64 bytes from 8.8.8.8: seq=5 ttl=57 time=20.248 ms\n64 bytes from 8.8.8.8: seq=6 ttl=57 time=18.777 ms\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is a lot to take in, so let's break it down. We are creating a mount by specifying the ",(0,s.jsx)(n.code,{children:"--mount"}),"\nargument, of ",(0,s.jsx)(n.code,{children:"type=bind"}),", we specify the source file from the host system that we want to share with\nour container, and the target file in the container, which does not necessarily need to exist."]}),"\n",(0,s.jsx)(n.p,{children:"We see that the running ping command outputs into the file on our local system, and even if we delete\nthe container and remove it, the data persists."}),"\n",(0,s.jsx)(n.h3,{id:"exercise-4",children:"Exercise 4"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Using a container image of your choice, create a container which has a volume that will contain\nthe output of the ",(0,s.jsx)(n.code,{children:"ps -aux"})," command inside."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NEW"})," Mount a read-only bind mount into the container which contains an image of your choice."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"exercise-5-wrapping-things-up",children:"Exercise 5 (wrapping things up)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Inspect the source code in ",(0,s.jsx)(n.a,{href:"https://github.com/IPW-CloudOps/simple-node-app",children:"this repository"})," and\ncreate a Dockerfile that builds a container image for that application."]}),"\n",(0,s.jsx)(n.li,{children:"Run the newly created container image to make sure everything works."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"This task is intentionally written ambiguous in order to make you search the official documentation,\nask the course instructors questions and familiarize yourself with what a DevOps engineer has to do\non a day-to-day basis. So do not feel bad if, at first, the task seems hard. Do your best, solve it\nat your own pace, collaborate with your colleagues, and, most importantly, have fun while learning\nnew things!"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"This course borrows many things, as well as its structure from:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://scgc.pages.upb.ro/cloud-courses/docs/security/containers",children:"SCGC Pages UPB"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://mobylab.docs.crescdi.pub.ro/docs/softwareDevelopment/laboratory1/",children:"Mobylab Pages UPB"})}),"\n"]}),(0,s.jsx)(n.p,{children:"This note is here then to give credits to the teams that created the above resources. For more\ninformation on Docker and other things, feel free to check them out!"})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},9859:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/overview.drawio-84914d61dbe34c02dcb5e52714aa582d.png"}}]);